
X_axis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080045b0  080045b0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b0  080045b0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000028  080045e0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080045e0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079c2  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198c  00000000  00000000  00027a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  00029bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b6a  00000000  00000000  0002a308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007694  00000000  00000000  0003ee72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083b41  00000000  00000000  00046506  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca047  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d64  00000000  00000000  000ca0c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000028 	.word	0x20000028
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004498 	.word	0x08004498

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000002c 	.word	0x2000002c
 8000100:	08004498 	.word	0x08004498

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_f2uiz>:
 800021c:	219e      	movs	r1, #158	; 0x9e
 800021e:	b510      	push	{r4, lr}
 8000220:	05c9      	lsls	r1, r1, #23
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	f000 fcf4 	bl	8000c10 <__aeabi_fcmpge>
 8000228:	2800      	cmp	r0, #0
 800022a:	d103      	bne.n	8000234 <__aeabi_f2uiz+0x18>
 800022c:	1c20      	adds	r0, r4, #0
 800022e:	f000 fc15 	bl	8000a5c <__aeabi_f2iz>
 8000232:	bd10      	pop	{r4, pc}
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	1c20      	adds	r0, r4, #0
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	f000 fa4b 	bl	80006d4 <__aeabi_fsub>
 800023e:	f000 fc0d 	bl	8000a5c <__aeabi_f2iz>
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	061b      	lsls	r3, r3, #24
 8000246:	469c      	mov	ip, r3
 8000248:	4460      	add	r0, ip
 800024a:	e7f2      	b.n	8000232 <__aeabi_f2uiz+0x16>

0800024c <__aeabi_fdiv>:
 800024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024e:	4657      	mov	r7, sl
 8000250:	464e      	mov	r6, r9
 8000252:	4645      	mov	r5, r8
 8000254:	46de      	mov	lr, fp
 8000256:	0244      	lsls	r4, r0, #9
 8000258:	b5e0      	push	{r5, r6, r7, lr}
 800025a:	0046      	lsls	r6, r0, #1
 800025c:	4688      	mov	r8, r1
 800025e:	0a64      	lsrs	r4, r4, #9
 8000260:	0e36      	lsrs	r6, r6, #24
 8000262:	0fc7      	lsrs	r7, r0, #31
 8000264:	2e00      	cmp	r6, #0
 8000266:	d063      	beq.n	8000330 <__aeabi_fdiv+0xe4>
 8000268:	2eff      	cmp	r6, #255	; 0xff
 800026a:	d024      	beq.n	80002b6 <__aeabi_fdiv+0x6a>
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	00e4      	lsls	r4, r4, #3
 8000270:	04db      	lsls	r3, r3, #19
 8000272:	431c      	orrs	r4, r3
 8000274:	2300      	movs	r3, #0
 8000276:	4699      	mov	r9, r3
 8000278:	469b      	mov	fp, r3
 800027a:	3e7f      	subs	r6, #127	; 0x7f
 800027c:	4643      	mov	r3, r8
 800027e:	4642      	mov	r2, r8
 8000280:	025d      	lsls	r5, r3, #9
 8000282:	0fd2      	lsrs	r2, r2, #31
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	0a6d      	lsrs	r5, r5, #9
 8000288:	0e1b      	lsrs	r3, r3, #24
 800028a:	4690      	mov	r8, r2
 800028c:	4692      	mov	sl, r2
 800028e:	d065      	beq.n	800035c <__aeabi_fdiv+0x110>
 8000290:	2bff      	cmp	r3, #255	; 0xff
 8000292:	d055      	beq.n	8000340 <__aeabi_fdiv+0xf4>
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	2100      	movs	r1, #0
 8000298:	00ed      	lsls	r5, r5, #3
 800029a:	04d2      	lsls	r2, r2, #19
 800029c:	3b7f      	subs	r3, #127	; 0x7f
 800029e:	4315      	orrs	r5, r2
 80002a0:	1af6      	subs	r6, r6, r3
 80002a2:	4643      	mov	r3, r8
 80002a4:	464a      	mov	r2, r9
 80002a6:	407b      	eors	r3, r7
 80002a8:	2a0f      	cmp	r2, #15
 80002aa:	d900      	bls.n	80002ae <__aeabi_fdiv+0x62>
 80002ac:	e08d      	b.n	80003ca <__aeabi_fdiv+0x17e>
 80002ae:	486d      	ldr	r0, [pc, #436]	; (8000464 <__aeabi_fdiv+0x218>)
 80002b0:	0092      	lsls	r2, r2, #2
 80002b2:	5882      	ldr	r2, [r0, r2]
 80002b4:	4697      	mov	pc, r2
 80002b6:	2c00      	cmp	r4, #0
 80002b8:	d154      	bne.n	8000364 <__aeabi_fdiv+0x118>
 80002ba:	2308      	movs	r3, #8
 80002bc:	4699      	mov	r9, r3
 80002be:	3b06      	subs	r3, #6
 80002c0:	26ff      	movs	r6, #255	; 0xff
 80002c2:	469b      	mov	fp, r3
 80002c4:	e7da      	b.n	800027c <__aeabi_fdiv+0x30>
 80002c6:	2500      	movs	r5, #0
 80002c8:	4653      	mov	r3, sl
 80002ca:	2902      	cmp	r1, #2
 80002cc:	d01b      	beq.n	8000306 <__aeabi_fdiv+0xba>
 80002ce:	2903      	cmp	r1, #3
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fdiv+0x88>
 80002d2:	e0bf      	b.n	8000454 <__aeabi_fdiv+0x208>
 80002d4:	2901      	cmp	r1, #1
 80002d6:	d028      	beq.n	800032a <__aeabi_fdiv+0xde>
 80002d8:	0030      	movs	r0, r6
 80002da:	307f      	adds	r0, #127	; 0x7f
 80002dc:	2800      	cmp	r0, #0
 80002de:	dd20      	ble.n	8000322 <__aeabi_fdiv+0xd6>
 80002e0:	076a      	lsls	r2, r5, #29
 80002e2:	d004      	beq.n	80002ee <__aeabi_fdiv+0xa2>
 80002e4:	220f      	movs	r2, #15
 80002e6:	402a      	ands	r2, r5
 80002e8:	2a04      	cmp	r2, #4
 80002ea:	d000      	beq.n	80002ee <__aeabi_fdiv+0xa2>
 80002ec:	3504      	adds	r5, #4
 80002ee:	012a      	lsls	r2, r5, #4
 80002f0:	d503      	bpl.n	80002fa <__aeabi_fdiv+0xae>
 80002f2:	0030      	movs	r0, r6
 80002f4:	4a5c      	ldr	r2, [pc, #368]	; (8000468 <__aeabi_fdiv+0x21c>)
 80002f6:	3080      	adds	r0, #128	; 0x80
 80002f8:	4015      	ands	r5, r2
 80002fa:	28fe      	cmp	r0, #254	; 0xfe
 80002fc:	dc03      	bgt.n	8000306 <__aeabi_fdiv+0xba>
 80002fe:	01ac      	lsls	r4, r5, #6
 8000300:	0a64      	lsrs	r4, r4, #9
 8000302:	b2c2      	uxtb	r2, r0
 8000304:	e001      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000306:	22ff      	movs	r2, #255	; 0xff
 8000308:	2400      	movs	r4, #0
 800030a:	0264      	lsls	r4, r4, #9
 800030c:	05d2      	lsls	r2, r2, #23
 800030e:	0a60      	lsrs	r0, r4, #9
 8000310:	07db      	lsls	r3, r3, #31
 8000312:	4310      	orrs	r0, r2
 8000314:	4318      	orrs	r0, r3
 8000316:	bc3c      	pop	{r2, r3, r4, r5}
 8000318:	4690      	mov	r8, r2
 800031a:	4699      	mov	r9, r3
 800031c:	46a2      	mov	sl, r4
 800031e:	46ab      	mov	fp, r5
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	2201      	movs	r2, #1
 8000324:	1a10      	subs	r0, r2, r0
 8000326:	281b      	cmp	r0, #27
 8000328:	dd7c      	ble.n	8000424 <__aeabi_fdiv+0x1d8>
 800032a:	2200      	movs	r2, #0
 800032c:	2400      	movs	r4, #0
 800032e:	e7ec      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000330:	2c00      	cmp	r4, #0
 8000332:	d11d      	bne.n	8000370 <__aeabi_fdiv+0x124>
 8000334:	2304      	movs	r3, #4
 8000336:	4699      	mov	r9, r3
 8000338:	3b03      	subs	r3, #3
 800033a:	2600      	movs	r6, #0
 800033c:	469b      	mov	fp, r3
 800033e:	e79d      	b.n	800027c <__aeabi_fdiv+0x30>
 8000340:	3eff      	subs	r6, #255	; 0xff
 8000342:	2d00      	cmp	r5, #0
 8000344:	d120      	bne.n	8000388 <__aeabi_fdiv+0x13c>
 8000346:	2102      	movs	r1, #2
 8000348:	4643      	mov	r3, r8
 800034a:	464a      	mov	r2, r9
 800034c:	407b      	eors	r3, r7
 800034e:	430a      	orrs	r2, r1
 8000350:	2a0f      	cmp	r2, #15
 8000352:	d8d8      	bhi.n	8000306 <__aeabi_fdiv+0xba>
 8000354:	4845      	ldr	r0, [pc, #276]	; (800046c <__aeabi_fdiv+0x220>)
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	5882      	ldr	r2, [r0, r2]
 800035a:	4697      	mov	pc, r2
 800035c:	2d00      	cmp	r5, #0
 800035e:	d119      	bne.n	8000394 <__aeabi_fdiv+0x148>
 8000360:	2101      	movs	r1, #1
 8000362:	e7f1      	b.n	8000348 <__aeabi_fdiv+0xfc>
 8000364:	230c      	movs	r3, #12
 8000366:	4699      	mov	r9, r3
 8000368:	3b09      	subs	r3, #9
 800036a:	26ff      	movs	r6, #255	; 0xff
 800036c:	469b      	mov	fp, r3
 800036e:	e785      	b.n	800027c <__aeabi_fdiv+0x30>
 8000370:	0020      	movs	r0, r4
 8000372:	f000 fc57 	bl	8000c24 <__clzsi2>
 8000376:	2676      	movs	r6, #118	; 0x76
 8000378:	1f43      	subs	r3, r0, #5
 800037a:	409c      	lsls	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	4276      	negs	r6, r6
 8000380:	1a36      	subs	r6, r6, r0
 8000382:	4699      	mov	r9, r3
 8000384:	469b      	mov	fp, r3
 8000386:	e779      	b.n	800027c <__aeabi_fdiv+0x30>
 8000388:	464a      	mov	r2, r9
 800038a:	2303      	movs	r3, #3
 800038c:	431a      	orrs	r2, r3
 800038e:	4691      	mov	r9, r2
 8000390:	2103      	movs	r1, #3
 8000392:	e786      	b.n	80002a2 <__aeabi_fdiv+0x56>
 8000394:	0028      	movs	r0, r5
 8000396:	f000 fc45 	bl	8000c24 <__clzsi2>
 800039a:	1f43      	subs	r3, r0, #5
 800039c:	1836      	adds	r6, r6, r0
 800039e:	409d      	lsls	r5, r3
 80003a0:	3676      	adds	r6, #118	; 0x76
 80003a2:	2100      	movs	r1, #0
 80003a4:	e77d      	b.n	80002a2 <__aeabi_fdiv+0x56>
 80003a6:	2480      	movs	r4, #128	; 0x80
 80003a8:	2300      	movs	r3, #0
 80003aa:	03e4      	lsls	r4, r4, #15
 80003ac:	22ff      	movs	r2, #255	; 0xff
 80003ae:	e7ac      	b.n	800030a <__aeabi_fdiv+0xbe>
 80003b0:	2500      	movs	r5, #0
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	03db      	lsls	r3, r3, #15
 80003b6:	421c      	tst	r4, r3
 80003b8:	d028      	beq.n	800040c <__aeabi_fdiv+0x1c0>
 80003ba:	421d      	tst	r5, r3
 80003bc:	d126      	bne.n	800040c <__aeabi_fdiv+0x1c0>
 80003be:	432b      	orrs	r3, r5
 80003c0:	025c      	lsls	r4, r3, #9
 80003c2:	0a64      	lsrs	r4, r4, #9
 80003c4:	4643      	mov	r3, r8
 80003c6:	22ff      	movs	r2, #255	; 0xff
 80003c8:	e79f      	b.n	800030a <__aeabi_fdiv+0xbe>
 80003ca:	0162      	lsls	r2, r4, #5
 80003cc:	016c      	lsls	r4, r5, #5
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d224      	bcs.n	800041c <__aeabi_fdiv+0x1d0>
 80003d2:	211b      	movs	r1, #27
 80003d4:	2500      	movs	r5, #0
 80003d6:	3e01      	subs	r6, #1
 80003d8:	2701      	movs	r7, #1
 80003da:	0010      	movs	r0, r2
 80003dc:	006d      	lsls	r5, r5, #1
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	2800      	cmp	r0, #0
 80003e2:	db01      	blt.n	80003e8 <__aeabi_fdiv+0x19c>
 80003e4:	4294      	cmp	r4, r2
 80003e6:	d801      	bhi.n	80003ec <__aeabi_fdiv+0x1a0>
 80003e8:	1b12      	subs	r2, r2, r4
 80003ea:	433d      	orrs	r5, r7
 80003ec:	3901      	subs	r1, #1
 80003ee:	2900      	cmp	r1, #0
 80003f0:	d1f3      	bne.n	80003da <__aeabi_fdiv+0x18e>
 80003f2:	0014      	movs	r4, r2
 80003f4:	1e62      	subs	r2, r4, #1
 80003f6:	4194      	sbcs	r4, r2
 80003f8:	4325      	orrs	r5, r4
 80003fa:	e76d      	b.n	80002d8 <__aeabi_fdiv+0x8c>
 80003fc:	46ba      	mov	sl, r7
 80003fe:	4659      	mov	r1, fp
 8000400:	0025      	movs	r5, r4
 8000402:	4653      	mov	r3, sl
 8000404:	2902      	cmp	r1, #2
 8000406:	d000      	beq.n	800040a <__aeabi_fdiv+0x1be>
 8000408:	e761      	b.n	80002ce <__aeabi_fdiv+0x82>
 800040a:	e77c      	b.n	8000306 <__aeabi_fdiv+0xba>
 800040c:	2380      	movs	r3, #128	; 0x80
 800040e:	03db      	lsls	r3, r3, #15
 8000410:	431c      	orrs	r4, r3
 8000412:	0264      	lsls	r4, r4, #9
 8000414:	0a64      	lsrs	r4, r4, #9
 8000416:	003b      	movs	r3, r7
 8000418:	22ff      	movs	r2, #255	; 0xff
 800041a:	e776      	b.n	800030a <__aeabi_fdiv+0xbe>
 800041c:	1b12      	subs	r2, r2, r4
 800041e:	211a      	movs	r1, #26
 8000420:	2501      	movs	r5, #1
 8000422:	e7d9      	b.n	80003d8 <__aeabi_fdiv+0x18c>
 8000424:	369e      	adds	r6, #158	; 0x9e
 8000426:	002a      	movs	r2, r5
 8000428:	40b5      	lsls	r5, r6
 800042a:	002c      	movs	r4, r5
 800042c:	40c2      	lsrs	r2, r0
 800042e:	1e65      	subs	r5, r4, #1
 8000430:	41ac      	sbcs	r4, r5
 8000432:	4314      	orrs	r4, r2
 8000434:	0762      	lsls	r2, r4, #29
 8000436:	d004      	beq.n	8000442 <__aeabi_fdiv+0x1f6>
 8000438:	220f      	movs	r2, #15
 800043a:	4022      	ands	r2, r4
 800043c:	2a04      	cmp	r2, #4
 800043e:	d000      	beq.n	8000442 <__aeabi_fdiv+0x1f6>
 8000440:	3404      	adds	r4, #4
 8000442:	0162      	lsls	r2, r4, #5
 8000444:	d403      	bmi.n	800044e <__aeabi_fdiv+0x202>
 8000446:	01a4      	lsls	r4, r4, #6
 8000448:	0a64      	lsrs	r4, r4, #9
 800044a:	2200      	movs	r2, #0
 800044c:	e75d      	b.n	800030a <__aeabi_fdiv+0xbe>
 800044e:	2201      	movs	r2, #1
 8000450:	2400      	movs	r4, #0
 8000452:	e75a      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000454:	2480      	movs	r4, #128	; 0x80
 8000456:	03e4      	lsls	r4, r4, #15
 8000458:	432c      	orrs	r4, r5
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	e753      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	080044b0 	.word	0x080044b0
 8000468:	f7ffffff 	.word	0xf7ffffff
 800046c:	080044f0 	.word	0x080044f0

08000470 <__aeabi_fmul>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464e      	mov	r6, r9
 8000474:	4657      	mov	r7, sl
 8000476:	4645      	mov	r5, r8
 8000478:	46de      	mov	lr, fp
 800047a:	b5e0      	push	{r5, r6, r7, lr}
 800047c:	0243      	lsls	r3, r0, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	0045      	lsls	r5, r0, #1
 8000482:	b083      	sub	sp, #12
 8000484:	1c0f      	adds	r7, r1, #0
 8000486:	4699      	mov	r9, r3
 8000488:	0e2d      	lsrs	r5, r5, #24
 800048a:	0fc6      	lsrs	r6, r0, #31
 800048c:	2d00      	cmp	r5, #0
 800048e:	d057      	beq.n	8000540 <__aeabi_fmul+0xd0>
 8000490:	2dff      	cmp	r5, #255	; 0xff
 8000492:	d024      	beq.n	80004de <__aeabi_fmul+0x6e>
 8000494:	2080      	movs	r0, #128	; 0x80
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	04c0      	lsls	r0, r0, #19
 800049a:	4318      	orrs	r0, r3
 800049c:	2300      	movs	r3, #0
 800049e:	4681      	mov	r9, r0
 80004a0:	469a      	mov	sl, r3
 80004a2:	469b      	mov	fp, r3
 80004a4:	3d7f      	subs	r5, #127	; 0x7f
 80004a6:	027c      	lsls	r4, r7, #9
 80004a8:	007a      	lsls	r2, r7, #1
 80004aa:	0ffb      	lsrs	r3, r7, #31
 80004ac:	0a64      	lsrs	r4, r4, #9
 80004ae:	0e12      	lsrs	r2, r2, #24
 80004b0:	4698      	mov	r8, r3
 80004b2:	d023      	beq.n	80004fc <__aeabi_fmul+0x8c>
 80004b4:	2aff      	cmp	r2, #255	; 0xff
 80004b6:	d04b      	beq.n	8000550 <__aeabi_fmul+0xe0>
 80004b8:	00e3      	lsls	r3, r4, #3
 80004ba:	2480      	movs	r4, #128	; 0x80
 80004bc:	2000      	movs	r0, #0
 80004be:	04e4      	lsls	r4, r4, #19
 80004c0:	3a7f      	subs	r2, #127	; 0x7f
 80004c2:	431c      	orrs	r4, r3
 80004c4:	18ad      	adds	r5, r5, r2
 80004c6:	1c6b      	adds	r3, r5, #1
 80004c8:	4647      	mov	r7, r8
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	4653      	mov	r3, sl
 80004ce:	4077      	eors	r7, r6
 80004d0:	003a      	movs	r2, r7
 80004d2:	2b0f      	cmp	r3, #15
 80004d4:	d848      	bhi.n	8000568 <__aeabi_fmul+0xf8>
 80004d6:	497d      	ldr	r1, [pc, #500]	; (80006cc <__aeabi_fmul+0x25c>)
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	58cb      	ldr	r3, [r1, r3]
 80004dc:	469f      	mov	pc, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d000      	beq.n	80004e4 <__aeabi_fmul+0x74>
 80004e2:	e085      	b.n	80005f0 <__aeabi_fmul+0x180>
 80004e4:	3308      	adds	r3, #8
 80004e6:	469a      	mov	sl, r3
 80004e8:	3b06      	subs	r3, #6
 80004ea:	469b      	mov	fp, r3
 80004ec:	027c      	lsls	r4, r7, #9
 80004ee:	007a      	lsls	r2, r7, #1
 80004f0:	0ffb      	lsrs	r3, r7, #31
 80004f2:	25ff      	movs	r5, #255	; 0xff
 80004f4:	0a64      	lsrs	r4, r4, #9
 80004f6:	0e12      	lsrs	r2, r2, #24
 80004f8:	4698      	mov	r8, r3
 80004fa:	d1db      	bne.n	80004b4 <__aeabi_fmul+0x44>
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x92>
 8000500:	e090      	b.n	8000624 <__aeabi_fmul+0x1b4>
 8000502:	4652      	mov	r2, sl
 8000504:	2301      	movs	r3, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4692      	mov	sl, r2
 800050a:	2001      	movs	r0, #1
 800050c:	e7db      	b.n	80004c6 <__aeabi_fmul+0x56>
 800050e:	464c      	mov	r4, r9
 8000510:	4658      	mov	r0, fp
 8000512:	0017      	movs	r7, r2
 8000514:	2802      	cmp	r0, #2
 8000516:	d024      	beq.n	8000562 <__aeabi_fmul+0xf2>
 8000518:	2803      	cmp	r0, #3
 800051a:	d100      	bne.n	800051e <__aeabi_fmul+0xae>
 800051c:	e0cf      	b.n	80006be <__aeabi_fmul+0x24e>
 800051e:	2200      	movs	r2, #0
 8000520:	2300      	movs	r3, #0
 8000522:	2801      	cmp	r0, #1
 8000524:	d14d      	bne.n	80005c2 <__aeabi_fmul+0x152>
 8000526:	0258      	lsls	r0, r3, #9
 8000528:	05d2      	lsls	r2, r2, #23
 800052a:	0a40      	lsrs	r0, r0, #9
 800052c:	07ff      	lsls	r7, r7, #31
 800052e:	4310      	orrs	r0, r2
 8000530:	4338      	orrs	r0, r7
 8000532:	b003      	add	sp, #12
 8000534:	bc3c      	pop	{r2, r3, r4, r5}
 8000536:	4690      	mov	r8, r2
 8000538:	4699      	mov	r9, r3
 800053a:	46a2      	mov	sl, r4
 800053c:	46ab      	mov	fp, r5
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	2b00      	cmp	r3, #0
 8000542:	d15b      	bne.n	80005fc <__aeabi_fmul+0x18c>
 8000544:	2304      	movs	r3, #4
 8000546:	469a      	mov	sl, r3
 8000548:	3b03      	subs	r3, #3
 800054a:	2500      	movs	r5, #0
 800054c:	469b      	mov	fp, r3
 800054e:	e7aa      	b.n	80004a6 <__aeabi_fmul+0x36>
 8000550:	35ff      	adds	r5, #255	; 0xff
 8000552:	2c00      	cmp	r4, #0
 8000554:	d160      	bne.n	8000618 <__aeabi_fmul+0x1a8>
 8000556:	4652      	mov	r2, sl
 8000558:	2302      	movs	r3, #2
 800055a:	431a      	orrs	r2, r3
 800055c:	4692      	mov	sl, r2
 800055e:	2002      	movs	r0, #2
 8000560:	e7b1      	b.n	80004c6 <__aeabi_fmul+0x56>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2300      	movs	r3, #0
 8000566:	e7de      	b.n	8000526 <__aeabi_fmul+0xb6>
 8000568:	464b      	mov	r3, r9
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	469c      	mov	ip, r3
 800056e:	464b      	mov	r3, r9
 8000570:	0426      	lsls	r6, r4, #16
 8000572:	0c36      	lsrs	r6, r6, #16
 8000574:	0418      	lsls	r0, r3, #16
 8000576:	4661      	mov	r1, ip
 8000578:	0033      	movs	r3, r6
 800057a:	0c22      	lsrs	r2, r4, #16
 800057c:	4664      	mov	r4, ip
 800057e:	0c00      	lsrs	r0, r0, #16
 8000580:	4343      	muls	r3, r0
 8000582:	434e      	muls	r6, r1
 8000584:	4350      	muls	r0, r2
 8000586:	4354      	muls	r4, r2
 8000588:	1980      	adds	r0, r0, r6
 800058a:	0c1a      	lsrs	r2, r3, #16
 800058c:	1812      	adds	r2, r2, r0
 800058e:	4296      	cmp	r6, r2
 8000590:	d903      	bls.n	800059a <__aeabi_fmul+0x12a>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0249      	lsls	r1, r1, #9
 8000596:	468c      	mov	ip, r1
 8000598:	4464      	add	r4, ip
 800059a:	041b      	lsls	r3, r3, #16
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	0410      	lsls	r0, r2, #16
 80005a0:	18c0      	adds	r0, r0, r3
 80005a2:	0183      	lsls	r3, r0, #6
 80005a4:	1e5e      	subs	r6, r3, #1
 80005a6:	41b3      	sbcs	r3, r6
 80005a8:	0e80      	lsrs	r0, r0, #26
 80005aa:	4318      	orrs	r0, r3
 80005ac:	0c13      	lsrs	r3, r2, #16
 80005ae:	191b      	adds	r3, r3, r4
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	4303      	orrs	r3, r0
 80005b4:	001c      	movs	r4, r3
 80005b6:	0123      	lsls	r3, r4, #4
 80005b8:	d579      	bpl.n	80006ae <__aeabi_fmul+0x23e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	0862      	lsrs	r2, r4, #1
 80005be:	401c      	ands	r4, r3
 80005c0:	4314      	orrs	r4, r2
 80005c2:	9a01      	ldr	r2, [sp, #4]
 80005c4:	327f      	adds	r2, #127	; 0x7f
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	dd4d      	ble.n	8000666 <__aeabi_fmul+0x1f6>
 80005ca:	0763      	lsls	r3, r4, #29
 80005cc:	d004      	beq.n	80005d8 <__aeabi_fmul+0x168>
 80005ce:	230f      	movs	r3, #15
 80005d0:	4023      	ands	r3, r4
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fmul+0x168>
 80005d6:	3404      	adds	r4, #4
 80005d8:	0123      	lsls	r3, r4, #4
 80005da:	d503      	bpl.n	80005e4 <__aeabi_fmul+0x174>
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <__aeabi_fmul+0x260>)
 80005de:	9a01      	ldr	r2, [sp, #4]
 80005e0:	401c      	ands	r4, r3
 80005e2:	3280      	adds	r2, #128	; 0x80
 80005e4:	2afe      	cmp	r2, #254	; 0xfe
 80005e6:	dcbc      	bgt.n	8000562 <__aeabi_fmul+0xf2>
 80005e8:	01a3      	lsls	r3, r4, #6
 80005ea:	0a5b      	lsrs	r3, r3, #9
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	e79a      	b.n	8000526 <__aeabi_fmul+0xb6>
 80005f0:	230c      	movs	r3, #12
 80005f2:	469a      	mov	sl, r3
 80005f4:	3b09      	subs	r3, #9
 80005f6:	25ff      	movs	r5, #255	; 0xff
 80005f8:	469b      	mov	fp, r3
 80005fa:	e754      	b.n	80004a6 <__aeabi_fmul+0x36>
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fb11 	bl	8000c24 <__clzsi2>
 8000602:	464a      	mov	r2, r9
 8000604:	1f43      	subs	r3, r0, #5
 8000606:	2576      	movs	r5, #118	; 0x76
 8000608:	409a      	lsls	r2, r3
 800060a:	2300      	movs	r3, #0
 800060c:	426d      	negs	r5, r5
 800060e:	4691      	mov	r9, r2
 8000610:	1a2d      	subs	r5, r5, r0
 8000612:	469a      	mov	sl, r3
 8000614:	469b      	mov	fp, r3
 8000616:	e746      	b.n	80004a6 <__aeabi_fmul+0x36>
 8000618:	4652      	mov	r2, sl
 800061a:	2303      	movs	r3, #3
 800061c:	431a      	orrs	r2, r3
 800061e:	4692      	mov	sl, r2
 8000620:	2003      	movs	r0, #3
 8000622:	e750      	b.n	80004c6 <__aeabi_fmul+0x56>
 8000624:	0020      	movs	r0, r4
 8000626:	f000 fafd 	bl	8000c24 <__clzsi2>
 800062a:	1f43      	subs	r3, r0, #5
 800062c:	1a2d      	subs	r5, r5, r0
 800062e:	409c      	lsls	r4, r3
 8000630:	3d76      	subs	r5, #118	; 0x76
 8000632:	2000      	movs	r0, #0
 8000634:	e747      	b.n	80004c6 <__aeabi_fmul+0x56>
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	2700      	movs	r7, #0
 800063a:	03db      	lsls	r3, r3, #15
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	e772      	b.n	8000526 <__aeabi_fmul+0xb6>
 8000640:	4642      	mov	r2, r8
 8000642:	e766      	b.n	8000512 <__aeabi_fmul+0xa2>
 8000644:	464c      	mov	r4, r9
 8000646:	0032      	movs	r2, r6
 8000648:	4658      	mov	r0, fp
 800064a:	e762      	b.n	8000512 <__aeabi_fmul+0xa2>
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	464a      	mov	r2, r9
 8000650:	03db      	lsls	r3, r3, #15
 8000652:	421a      	tst	r2, r3
 8000654:	d022      	beq.n	800069c <__aeabi_fmul+0x22c>
 8000656:	421c      	tst	r4, r3
 8000658:	d120      	bne.n	800069c <__aeabi_fmul+0x22c>
 800065a:	4323      	orrs	r3, r4
 800065c:	025b      	lsls	r3, r3, #9
 800065e:	0a5b      	lsrs	r3, r3, #9
 8000660:	4647      	mov	r7, r8
 8000662:	22ff      	movs	r2, #255	; 0xff
 8000664:	e75f      	b.n	8000526 <__aeabi_fmul+0xb6>
 8000666:	2301      	movs	r3, #1
 8000668:	1a9a      	subs	r2, r3, r2
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc21      	bgt.n	80006b2 <__aeabi_fmul+0x242>
 800066e:	0023      	movs	r3, r4
 8000670:	9901      	ldr	r1, [sp, #4]
 8000672:	40d3      	lsrs	r3, r2
 8000674:	319e      	adds	r1, #158	; 0x9e
 8000676:	408c      	lsls	r4, r1
 8000678:	001a      	movs	r2, r3
 800067a:	0023      	movs	r3, r4
 800067c:	1e5c      	subs	r4, r3, #1
 800067e:	41a3      	sbcs	r3, r4
 8000680:	4313      	orrs	r3, r2
 8000682:	075a      	lsls	r2, r3, #29
 8000684:	d004      	beq.n	8000690 <__aeabi_fmul+0x220>
 8000686:	220f      	movs	r2, #15
 8000688:	401a      	ands	r2, r3
 800068a:	2a04      	cmp	r2, #4
 800068c:	d000      	beq.n	8000690 <__aeabi_fmul+0x220>
 800068e:	3304      	adds	r3, #4
 8000690:	015a      	lsls	r2, r3, #5
 8000692:	d411      	bmi.n	80006b8 <__aeabi_fmul+0x248>
 8000694:	019b      	lsls	r3, r3, #6
 8000696:	0a5b      	lsrs	r3, r3, #9
 8000698:	2200      	movs	r2, #0
 800069a:	e744      	b.n	8000526 <__aeabi_fmul+0xb6>
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	464a      	mov	r2, r9
 80006a0:	03db      	lsls	r3, r3, #15
 80006a2:	4313      	orrs	r3, r2
 80006a4:	025b      	lsls	r3, r3, #9
 80006a6:	0a5b      	lsrs	r3, r3, #9
 80006a8:	0037      	movs	r7, r6
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	e73b      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006ae:	9501      	str	r5, [sp, #4]
 80006b0:	e787      	b.n	80005c2 <__aeabi_fmul+0x152>
 80006b2:	2200      	movs	r2, #0
 80006b4:	2300      	movs	r3, #0
 80006b6:	e736      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006b8:	2201      	movs	r2, #1
 80006ba:	2300      	movs	r3, #0
 80006bc:	e733      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	03db      	lsls	r3, r3, #15
 80006c2:	4323      	orrs	r3, r4
 80006c4:	025b      	lsls	r3, r3, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	e72c      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006cc:	08004530 	.word	0x08004530
 80006d0:	f7ffffff 	.word	0xf7ffffff

080006d4 <__aeabi_fsub>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	4647      	mov	r7, r8
 80006d8:	46ce      	mov	lr, r9
 80006da:	0044      	lsls	r4, r0, #1
 80006dc:	0fc2      	lsrs	r2, r0, #31
 80006de:	b580      	push	{r7, lr}
 80006e0:	0247      	lsls	r7, r0, #9
 80006e2:	0248      	lsls	r0, r1, #9
 80006e4:	0a40      	lsrs	r0, r0, #9
 80006e6:	4684      	mov	ip, r0
 80006e8:	4666      	mov	r6, ip
 80006ea:	0048      	lsls	r0, r1, #1
 80006ec:	0a7f      	lsrs	r7, r7, #9
 80006ee:	0e24      	lsrs	r4, r4, #24
 80006f0:	00f6      	lsls	r6, r6, #3
 80006f2:	0025      	movs	r5, r4
 80006f4:	4690      	mov	r8, r2
 80006f6:	00fb      	lsls	r3, r7, #3
 80006f8:	0e00      	lsrs	r0, r0, #24
 80006fa:	0fc9      	lsrs	r1, r1, #31
 80006fc:	46b1      	mov	r9, r6
 80006fe:	28ff      	cmp	r0, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0x30>
 8000702:	e085      	b.n	8000810 <__aeabi_fsub+0x13c>
 8000704:	2601      	movs	r6, #1
 8000706:	4071      	eors	r1, r6
 8000708:	1a26      	subs	r6, r4, r0
 800070a:	4291      	cmp	r1, r2
 800070c:	d057      	beq.n	80007be <__aeabi_fsub+0xea>
 800070e:	2e00      	cmp	r6, #0
 8000710:	dd43      	ble.n	800079a <__aeabi_fsub+0xc6>
 8000712:	2800      	cmp	r0, #0
 8000714:	d000      	beq.n	8000718 <__aeabi_fsub+0x44>
 8000716:	e07f      	b.n	8000818 <__aeabi_fsub+0x144>
 8000718:	4649      	mov	r1, r9
 800071a:	2900      	cmp	r1, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0x4c>
 800071e:	e0aa      	b.n	8000876 <__aeabi_fsub+0x1a2>
 8000720:	3e01      	subs	r6, #1
 8000722:	2e00      	cmp	r6, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fsub+0x54>
 8000726:	e0f7      	b.n	8000918 <__aeabi_fsub+0x244>
 8000728:	1a5b      	subs	r3, r3, r1
 800072a:	015a      	lsls	r2, r3, #5
 800072c:	d400      	bmi.n	8000730 <__aeabi_fsub+0x5c>
 800072e:	e08b      	b.n	8000848 <__aeabi_fsub+0x174>
 8000730:	019b      	lsls	r3, r3, #6
 8000732:	099c      	lsrs	r4, r3, #6
 8000734:	0020      	movs	r0, r4
 8000736:	f000 fa75 	bl	8000c24 <__clzsi2>
 800073a:	3805      	subs	r0, #5
 800073c:	4084      	lsls	r4, r0
 800073e:	4285      	cmp	r5, r0
 8000740:	dd00      	ble.n	8000744 <__aeabi_fsub+0x70>
 8000742:	e0d3      	b.n	80008ec <__aeabi_fsub+0x218>
 8000744:	1b45      	subs	r5, r0, r5
 8000746:	0023      	movs	r3, r4
 8000748:	2020      	movs	r0, #32
 800074a:	3501      	adds	r5, #1
 800074c:	40eb      	lsrs	r3, r5
 800074e:	1b45      	subs	r5, r0, r5
 8000750:	40ac      	lsls	r4, r5
 8000752:	1e62      	subs	r2, r4, #1
 8000754:	4194      	sbcs	r4, r2
 8000756:	4323      	orrs	r3, r4
 8000758:	2407      	movs	r4, #7
 800075a:	2500      	movs	r5, #0
 800075c:	401c      	ands	r4, r3
 800075e:	2201      	movs	r2, #1
 8000760:	4641      	mov	r1, r8
 8000762:	400a      	ands	r2, r1
 8000764:	2c00      	cmp	r4, #0
 8000766:	d004      	beq.n	8000772 <__aeabi_fsub+0x9e>
 8000768:	210f      	movs	r1, #15
 800076a:	4019      	ands	r1, r3
 800076c:	2904      	cmp	r1, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fsub+0x9e>
 8000770:	3304      	adds	r3, #4
 8000772:	0159      	lsls	r1, r3, #5
 8000774:	d400      	bmi.n	8000778 <__aeabi_fsub+0xa4>
 8000776:	e080      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000778:	3501      	adds	r5, #1
 800077a:	b2ec      	uxtb	r4, r5
 800077c:	2dff      	cmp	r5, #255	; 0xff
 800077e:	d000      	beq.n	8000782 <__aeabi_fsub+0xae>
 8000780:	e0a3      	b.n	80008ca <__aeabi_fsub+0x1f6>
 8000782:	24ff      	movs	r4, #255	; 0xff
 8000784:	2300      	movs	r3, #0
 8000786:	025b      	lsls	r3, r3, #9
 8000788:	05e4      	lsls	r4, r4, #23
 800078a:	0a58      	lsrs	r0, r3, #9
 800078c:	07d2      	lsls	r2, r2, #31
 800078e:	4320      	orrs	r0, r4
 8000790:	4310      	orrs	r0, r2
 8000792:	bc0c      	pop	{r2, r3}
 8000794:	4690      	mov	r8, r2
 8000796:	4699      	mov	r9, r3
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079a:	2e00      	cmp	r6, #0
 800079c:	d174      	bne.n	8000888 <__aeabi_fsub+0x1b4>
 800079e:	1c60      	adds	r0, r4, #1
 80007a0:	b2c0      	uxtb	r0, r0
 80007a2:	2801      	cmp	r0, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_fsub+0xd4>
 80007a6:	e0a7      	b.n	80008f8 <__aeabi_fsub+0x224>
 80007a8:	464a      	mov	r2, r9
 80007aa:	1a9c      	subs	r4, r3, r2
 80007ac:	0162      	lsls	r2, r4, #5
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_fsub+0xde>
 80007b0:	e0b6      	b.n	8000920 <__aeabi_fsub+0x24c>
 80007b2:	2c00      	cmp	r4, #0
 80007b4:	d1be      	bne.n	8000734 <__aeabi_fsub+0x60>
 80007b6:	2200      	movs	r2, #0
 80007b8:	2400      	movs	r4, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e7e3      	b.n	8000786 <__aeabi_fsub+0xb2>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fsub+0xf0>
 80007c2:	e085      	b.n	80008d0 <__aeabi_fsub+0x1fc>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d046      	beq.n	8000856 <__aeabi_fsub+0x182>
 80007c8:	2cff      	cmp	r4, #255	; 0xff
 80007ca:	d049      	beq.n	8000860 <__aeabi_fsub+0x18c>
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	4648      	mov	r0, r9
 80007d0:	04d2      	lsls	r2, r2, #19
 80007d2:	4310      	orrs	r0, r2
 80007d4:	4681      	mov	r9, r0
 80007d6:	2201      	movs	r2, #1
 80007d8:	2e1b      	cmp	r6, #27
 80007da:	dc09      	bgt.n	80007f0 <__aeabi_fsub+0x11c>
 80007dc:	2020      	movs	r0, #32
 80007de:	464c      	mov	r4, r9
 80007e0:	1b80      	subs	r0, r0, r6
 80007e2:	4084      	lsls	r4, r0
 80007e4:	464a      	mov	r2, r9
 80007e6:	0020      	movs	r0, r4
 80007e8:	40f2      	lsrs	r2, r6
 80007ea:	1e44      	subs	r4, r0, #1
 80007ec:	41a0      	sbcs	r0, r4
 80007ee:	4302      	orrs	r2, r0
 80007f0:	189b      	adds	r3, r3, r2
 80007f2:	015a      	lsls	r2, r3, #5
 80007f4:	d528      	bpl.n	8000848 <__aeabi_fsub+0x174>
 80007f6:	3501      	adds	r5, #1
 80007f8:	2dff      	cmp	r5, #255	; 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fsub+0x12a>
 80007fc:	e0a8      	b.n	8000950 <__aeabi_fsub+0x27c>
 80007fe:	2201      	movs	r2, #1
 8000800:	2407      	movs	r4, #7
 8000802:	4994      	ldr	r1, [pc, #592]	; (8000a54 <__aeabi_fsub+0x380>)
 8000804:	401a      	ands	r2, r3
 8000806:	085b      	lsrs	r3, r3, #1
 8000808:	400b      	ands	r3, r1
 800080a:	4313      	orrs	r3, r2
 800080c:	401c      	ands	r4, r3
 800080e:	e7a6      	b.n	800075e <__aeabi_fsub+0x8a>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x142>
 8000814:	e778      	b.n	8000708 <__aeabi_fsub+0x34>
 8000816:	e775      	b.n	8000704 <__aeabi_fsub+0x30>
 8000818:	2cff      	cmp	r4, #255	; 0xff
 800081a:	d054      	beq.n	80008c6 <__aeabi_fsub+0x1f2>
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	4649      	mov	r1, r9
 8000820:	04d2      	lsls	r2, r2, #19
 8000822:	4311      	orrs	r1, r2
 8000824:	4689      	mov	r9, r1
 8000826:	2201      	movs	r2, #1
 8000828:	2e1b      	cmp	r6, #27
 800082a:	dc09      	bgt.n	8000840 <__aeabi_fsub+0x16c>
 800082c:	2120      	movs	r1, #32
 800082e:	4648      	mov	r0, r9
 8000830:	1b89      	subs	r1, r1, r6
 8000832:	4088      	lsls	r0, r1
 8000834:	464a      	mov	r2, r9
 8000836:	0001      	movs	r1, r0
 8000838:	40f2      	lsrs	r2, r6
 800083a:	1e48      	subs	r0, r1, #1
 800083c:	4181      	sbcs	r1, r0
 800083e:	430a      	orrs	r2, r1
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	015a      	lsls	r2, r3, #5
 8000844:	d500      	bpl.n	8000848 <__aeabi_fsub+0x174>
 8000846:	e773      	b.n	8000730 <__aeabi_fsub+0x5c>
 8000848:	2201      	movs	r2, #1
 800084a:	4641      	mov	r1, r8
 800084c:	400a      	ands	r2, r1
 800084e:	0759      	lsls	r1, r3, #29
 8000850:	d000      	beq.n	8000854 <__aeabi_fsub+0x180>
 8000852:	e789      	b.n	8000768 <__aeabi_fsub+0x94>
 8000854:	e011      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000856:	4648      	mov	r0, r9
 8000858:	2800      	cmp	r0, #0
 800085a:	d158      	bne.n	800090e <__aeabi_fsub+0x23a>
 800085c:	2cff      	cmp	r4, #255	; 0xff
 800085e:	d10c      	bne.n	800087a <__aeabi_fsub+0x1a6>
 8000860:	08db      	lsrs	r3, r3, #3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x194>
 8000866:	e78c      	b.n	8000782 <__aeabi_fsub+0xae>
 8000868:	2080      	movs	r0, #128	; 0x80
 800086a:	03c0      	lsls	r0, r0, #15
 800086c:	4303      	orrs	r3, r0
 800086e:	025b      	lsls	r3, r3, #9
 8000870:	0a5b      	lsrs	r3, r3, #9
 8000872:	24ff      	movs	r4, #255	; 0xff
 8000874:	e787      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d025      	beq.n	80008c6 <__aeabi_fsub+0x1f2>
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	2dff      	cmp	r5, #255	; 0xff
 800087e:	d0f0      	beq.n	8000862 <__aeabi_fsub+0x18e>
 8000880:	025b      	lsls	r3, r3, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	b2ec      	uxtb	r4, r5
 8000886:	e77e      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000888:	2c00      	cmp	r4, #0
 800088a:	d04d      	beq.n	8000928 <__aeabi_fsub+0x254>
 800088c:	28ff      	cmp	r0, #255	; 0xff
 800088e:	d018      	beq.n	80008c2 <__aeabi_fsub+0x1ee>
 8000890:	2480      	movs	r4, #128	; 0x80
 8000892:	04e4      	lsls	r4, r4, #19
 8000894:	4272      	negs	r2, r6
 8000896:	4323      	orrs	r3, r4
 8000898:	2a1b      	cmp	r2, #27
 800089a:	dd00      	ble.n	800089e <__aeabi_fsub+0x1ca>
 800089c:	e0c4      	b.n	8000a28 <__aeabi_fsub+0x354>
 800089e:	001c      	movs	r4, r3
 80008a0:	2520      	movs	r5, #32
 80008a2:	40d4      	lsrs	r4, r2
 80008a4:	1aaa      	subs	r2, r5, r2
 80008a6:	4093      	lsls	r3, r2
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	4193      	sbcs	r3, r2
 80008ac:	4323      	orrs	r3, r4
 80008ae:	464a      	mov	r2, r9
 80008b0:	0005      	movs	r5, r0
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	4688      	mov	r8, r1
 80008b6:	e738      	b.n	800072a <__aeabi_fsub+0x56>
 80008b8:	1c72      	adds	r2, r6, #1
 80008ba:	d0f8      	beq.n	80008ae <__aeabi_fsub+0x1da>
 80008bc:	43f2      	mvns	r2, r6
 80008be:	28ff      	cmp	r0, #255	; 0xff
 80008c0:	d1ea      	bne.n	8000898 <__aeabi_fsub+0x1c4>
 80008c2:	000a      	movs	r2, r1
 80008c4:	464b      	mov	r3, r9
 80008c6:	25ff      	movs	r5, #255	; 0xff
 80008c8:	e7d7      	b.n	800087a <__aeabi_fsub+0x1a6>
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	0a5b      	lsrs	r3, r3, #9
 80008ce:	e75a      	b.n	8000786 <__aeabi_fsub+0xb2>
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d141      	bne.n	8000958 <__aeabi_fsub+0x284>
 80008d4:	1c65      	adds	r5, r4, #1
 80008d6:	b2e9      	uxtb	r1, r5
 80008d8:	2901      	cmp	r1, #1
 80008da:	dd45      	ble.n	8000968 <__aeabi_fsub+0x294>
 80008dc:	2dff      	cmp	r5, #255	; 0xff
 80008de:	d100      	bne.n	80008e2 <__aeabi_fsub+0x20e>
 80008e0:	e74f      	b.n	8000782 <__aeabi_fsub+0xae>
 80008e2:	2407      	movs	r4, #7
 80008e4:	444b      	add	r3, r9
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	401c      	ands	r4, r3
 80008ea:	e738      	b.n	800075e <__aeabi_fsub+0x8a>
 80008ec:	2207      	movs	r2, #7
 80008ee:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <__aeabi_fsub+0x384>)
 80008f0:	1a2d      	subs	r5, r5, r0
 80008f2:	4023      	ands	r3, r4
 80008f4:	4014      	ands	r4, r2
 80008f6:	e732      	b.n	800075e <__aeabi_fsub+0x8a>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d11d      	bne.n	8000938 <__aeabi_fsub+0x264>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d17a      	bne.n	80009f6 <__aeabi_fsub+0x322>
 8000900:	464b      	mov	r3, r9
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fsub+0x234>
 8000906:	e091      	b.n	8000a2c <__aeabi_fsub+0x358>
 8000908:	000a      	movs	r2, r1
 800090a:	2500      	movs	r5, #0
 800090c:	e7b5      	b.n	800087a <__aeabi_fsub+0x1a6>
 800090e:	3e01      	subs	r6, #1
 8000910:	2e00      	cmp	r6, #0
 8000912:	d119      	bne.n	8000948 <__aeabi_fsub+0x274>
 8000914:	444b      	add	r3, r9
 8000916:	e76c      	b.n	80007f2 <__aeabi_fsub+0x11e>
 8000918:	2cff      	cmp	r4, #255	; 0xff
 800091a:	d184      	bne.n	8000826 <__aeabi_fsub+0x152>
 800091c:	25ff      	movs	r5, #255	; 0xff
 800091e:	e7ac      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000920:	464a      	mov	r2, r9
 8000922:	4688      	mov	r8, r1
 8000924:	1ad4      	subs	r4, r2, r3
 8000926:	e705      	b.n	8000734 <__aeabi_fsub+0x60>
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1c5      	bne.n	80008b8 <__aeabi_fsub+0x1e4>
 800092c:	000a      	movs	r2, r1
 800092e:	28ff      	cmp	r0, #255	; 0xff
 8000930:	d0c8      	beq.n	80008c4 <__aeabi_fsub+0x1f0>
 8000932:	0005      	movs	r5, r0
 8000934:	464b      	mov	r3, r9
 8000936:	e7a0      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000938:	2b00      	cmp	r3, #0
 800093a:	d149      	bne.n	80009d0 <__aeabi_fsub+0x2fc>
 800093c:	464b      	mov	r3, r9
 800093e:	2b00      	cmp	r3, #0
 8000940:	d077      	beq.n	8000a32 <__aeabi_fsub+0x35e>
 8000942:	000a      	movs	r2, r1
 8000944:	25ff      	movs	r5, #255	; 0xff
 8000946:	e798      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000948:	2cff      	cmp	r4, #255	; 0xff
 800094a:	d000      	beq.n	800094e <__aeabi_fsub+0x27a>
 800094c:	e743      	b.n	80007d6 <__aeabi_fsub+0x102>
 800094e:	e787      	b.n	8000860 <__aeabi_fsub+0x18c>
 8000950:	000a      	movs	r2, r1
 8000952:	24ff      	movs	r4, #255	; 0xff
 8000954:	2300      	movs	r3, #0
 8000956:	e716      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d115      	bne.n	8000988 <__aeabi_fsub+0x2b4>
 800095c:	2b00      	cmp	r3, #0
 800095e:	d157      	bne.n	8000a10 <__aeabi_fsub+0x33c>
 8000960:	28ff      	cmp	r0, #255	; 0xff
 8000962:	d1e6      	bne.n	8000932 <__aeabi_fsub+0x25e>
 8000964:	464b      	mov	r3, r9
 8000966:	e77b      	b.n	8000860 <__aeabi_fsub+0x18c>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d120      	bne.n	80009ae <__aeabi_fsub+0x2da>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d057      	beq.n	8000a20 <__aeabi_fsub+0x34c>
 8000970:	4649      	mov	r1, r9
 8000972:	2900      	cmp	r1, #0
 8000974:	d053      	beq.n	8000a1e <__aeabi_fsub+0x34a>
 8000976:	444b      	add	r3, r9
 8000978:	015a      	lsls	r2, r3, #5
 800097a:	d568      	bpl.n	8000a4e <__aeabi_fsub+0x37a>
 800097c:	2407      	movs	r4, #7
 800097e:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <__aeabi_fsub+0x384>)
 8000980:	401c      	ands	r4, r3
 8000982:	2501      	movs	r5, #1
 8000984:	4013      	ands	r3, r2
 8000986:	e6ea      	b.n	800075e <__aeabi_fsub+0x8a>
 8000988:	28ff      	cmp	r0, #255	; 0xff
 800098a:	d0eb      	beq.n	8000964 <__aeabi_fsub+0x290>
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	04d2      	lsls	r2, r2, #19
 8000990:	4276      	negs	r6, r6
 8000992:	4313      	orrs	r3, r2
 8000994:	2e1b      	cmp	r6, #27
 8000996:	dc53      	bgt.n	8000a40 <__aeabi_fsub+0x36c>
 8000998:	2520      	movs	r5, #32
 800099a:	1bad      	subs	r5, r5, r6
 800099c:	001a      	movs	r2, r3
 800099e:	40ab      	lsls	r3, r5
 80009a0:	40f2      	lsrs	r2, r6
 80009a2:	1e5c      	subs	r4, r3, #1
 80009a4:	41a3      	sbcs	r3, r4
 80009a6:	4313      	orrs	r3, r2
 80009a8:	444b      	add	r3, r9
 80009aa:	0005      	movs	r5, r0
 80009ac:	e721      	b.n	80007f2 <__aeabi_fsub+0x11e>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0d8      	beq.n	8000964 <__aeabi_fsub+0x290>
 80009b2:	4649      	mov	r1, r9
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x2e6>
 80009b8:	e752      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	03c9      	lsls	r1, r1, #15
 80009be:	420f      	tst	r7, r1
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fsub+0x2f0>
 80009c2:	e74d      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009c4:	4660      	mov	r0, ip
 80009c6:	4208      	tst	r0, r1
 80009c8:	d000      	beq.n	80009cc <__aeabi_fsub+0x2f8>
 80009ca:	e749      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009cc:	464b      	mov	r3, r9
 80009ce:	e747      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009d0:	4648      	mov	r0, r9
 80009d2:	25ff      	movs	r5, #255	; 0xff
 80009d4:	2800      	cmp	r0, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0x306>
 80009d8:	e74f      	b.n	800087a <__aeabi_fsub+0x1a6>
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	03d2      	lsls	r2, r2, #15
 80009de:	4217      	tst	r7, r2
 80009e0:	d004      	beq.n	80009ec <__aeabi_fsub+0x318>
 80009e2:	4660      	mov	r0, ip
 80009e4:	4210      	tst	r0, r2
 80009e6:	d101      	bne.n	80009ec <__aeabi_fsub+0x318>
 80009e8:	464b      	mov	r3, r9
 80009ea:	4688      	mov	r8, r1
 80009ec:	2201      	movs	r2, #1
 80009ee:	4641      	mov	r1, r8
 80009f0:	25ff      	movs	r5, #255	; 0xff
 80009f2:	400a      	ands	r2, r1
 80009f4:	e741      	b.n	800087a <__aeabi_fsub+0x1a6>
 80009f6:	4648      	mov	r0, r9
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d01f      	beq.n	8000a3c <__aeabi_fsub+0x368>
 80009fc:	1a1a      	subs	r2, r3, r0
 80009fe:	0150      	lsls	r0, r2, #5
 8000a00:	d520      	bpl.n	8000a44 <__aeabi_fsub+0x370>
 8000a02:	464a      	mov	r2, r9
 8000a04:	2407      	movs	r4, #7
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	401c      	ands	r4, r3
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	e6a6      	b.n	800075e <__aeabi_fsub+0x8a>
 8000a10:	1c74      	adds	r4, r6, #1
 8000a12:	d0c9      	beq.n	80009a8 <__aeabi_fsub+0x2d4>
 8000a14:	43f6      	mvns	r6, r6
 8000a16:	28ff      	cmp	r0, #255	; 0xff
 8000a18:	d1bc      	bne.n	8000994 <__aeabi_fsub+0x2c0>
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	e720      	b.n	8000860 <__aeabi_fsub+0x18c>
 8000a1e:	4699      	mov	r9, r3
 8000a20:	464b      	mov	r3, r9
 8000a22:	2500      	movs	r5, #0
 8000a24:	08db      	lsrs	r3, r3, #3
 8000a26:	e72b      	b.n	8000880 <__aeabi_fsub+0x1ac>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e740      	b.n	80008ae <__aeabi_fsub+0x1da>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e6a9      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	2200      	movs	r2, #0
 8000a36:	03db      	lsls	r3, r3, #15
 8000a38:	24ff      	movs	r4, #255	; 0xff
 8000a3a:	e6a4      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000a3c:	2500      	movs	r5, #0
 8000a3e:	e71c      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e7b1      	b.n	80009a8 <__aeabi_fsub+0x2d4>
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	d0f1      	beq.n	8000a2c <__aeabi_fsub+0x358>
 8000a48:	0013      	movs	r3, r2
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	e6fc      	b.n	8000848 <__aeabi_fsub+0x174>
 8000a4e:	2500      	movs	r5, #0
 8000a50:	e6fa      	b.n	8000848 <__aeabi_fsub+0x174>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	7dffffff 	.word	0x7dffffff
 8000a58:	fbffffff 	.word	0xfbffffff

08000a5c <__aeabi_f2iz>:
 8000a5c:	0241      	lsls	r1, r0, #9
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0fc3      	lsrs	r3, r0, #31
 8000a62:	0a49      	lsrs	r1, r1, #9
 8000a64:	0e12      	lsrs	r2, r2, #24
 8000a66:	2000      	movs	r0, #0
 8000a68:	2a7e      	cmp	r2, #126	; 0x7e
 8000a6a:	d90d      	bls.n	8000a88 <__aeabi_f2iz+0x2c>
 8000a6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a6e:	d80c      	bhi.n	8000a8a <__aeabi_f2iz+0x2e>
 8000a70:	2080      	movs	r0, #128	; 0x80
 8000a72:	0400      	lsls	r0, r0, #16
 8000a74:	4301      	orrs	r1, r0
 8000a76:	2a95      	cmp	r2, #149	; 0x95
 8000a78:	dc0a      	bgt.n	8000a90 <__aeabi_f2iz+0x34>
 8000a7a:	2096      	movs	r0, #150	; 0x96
 8000a7c:	1a82      	subs	r2, r0, r2
 8000a7e:	40d1      	lsrs	r1, r2
 8000a80:	4248      	negs	r0, r1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_f2iz+0x2c>
 8000a86:	0008      	movs	r0, r1
 8000a88:	4770      	bx	lr
 8000a8a:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <__aeabi_f2iz+0x3c>)
 8000a8c:	1898      	adds	r0, r3, r2
 8000a8e:	e7fb      	b.n	8000a88 <__aeabi_f2iz+0x2c>
 8000a90:	3a96      	subs	r2, #150	; 0x96
 8000a92:	4091      	lsls	r1, r2
 8000a94:	e7f4      	b.n	8000a80 <__aeabi_f2iz+0x24>
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	7fffffff 	.word	0x7fffffff

08000a9c <__aeabi_i2f>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d03d      	beq.n	8000b1e <__aeabi_i2f+0x82>
 8000aa2:	17c3      	asrs	r3, r0, #31
 8000aa4:	18c5      	adds	r5, r0, r3
 8000aa6:	405d      	eors	r5, r3
 8000aa8:	0fc4      	lsrs	r4, r0, #31
 8000aaa:	0028      	movs	r0, r5
 8000aac:	f000 f8ba 	bl	8000c24 <__clzsi2>
 8000ab0:	229e      	movs	r2, #158	; 0x9e
 8000ab2:	1a12      	subs	r2, r2, r0
 8000ab4:	2a96      	cmp	r2, #150	; 0x96
 8000ab6:	dc07      	bgt.n	8000ac8 <__aeabi_i2f+0x2c>
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	2808      	cmp	r0, #8
 8000abc:	dd33      	ble.n	8000b26 <__aeabi_i2f+0x8a>
 8000abe:	3808      	subs	r0, #8
 8000ac0:	4085      	lsls	r5, r0
 8000ac2:	0268      	lsls	r0, r5, #9
 8000ac4:	0a40      	lsrs	r0, r0, #9
 8000ac6:	e023      	b.n	8000b10 <__aeabi_i2f+0x74>
 8000ac8:	2a99      	cmp	r2, #153	; 0x99
 8000aca:	dd0b      	ble.n	8000ae4 <__aeabi_i2f+0x48>
 8000acc:	2305      	movs	r3, #5
 8000ace:	0029      	movs	r1, r5
 8000ad0:	1a1b      	subs	r3, r3, r0
 8000ad2:	40d9      	lsrs	r1, r3
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	331b      	adds	r3, #27
 8000ad8:	409d      	lsls	r5, r3
 8000ada:	002b      	movs	r3, r5
 8000adc:	1e5d      	subs	r5, r3, #1
 8000ade:	41ab      	sbcs	r3, r5
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	000d      	movs	r5, r1
 8000ae4:	2805      	cmp	r0, #5
 8000ae6:	dd01      	ble.n	8000aec <__aeabi_i2f+0x50>
 8000ae8:	1f43      	subs	r3, r0, #5
 8000aea:	409d      	lsls	r5, r3
 8000aec:	002b      	movs	r3, r5
 8000aee:	490f      	ldr	r1, [pc, #60]	; (8000b2c <__aeabi_i2f+0x90>)
 8000af0:	400b      	ands	r3, r1
 8000af2:	076e      	lsls	r6, r5, #29
 8000af4:	d009      	beq.n	8000b0a <__aeabi_i2f+0x6e>
 8000af6:	260f      	movs	r6, #15
 8000af8:	4035      	ands	r5, r6
 8000afa:	2d04      	cmp	r5, #4
 8000afc:	d005      	beq.n	8000b0a <__aeabi_i2f+0x6e>
 8000afe:	3304      	adds	r3, #4
 8000b00:	015d      	lsls	r5, r3, #5
 8000b02:	d502      	bpl.n	8000b0a <__aeabi_i2f+0x6e>
 8000b04:	229f      	movs	r2, #159	; 0x9f
 8000b06:	400b      	ands	r3, r1
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	019b      	lsls	r3, r3, #6
 8000b0c:	0a58      	lsrs	r0, r3, #9
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	0240      	lsls	r0, r0, #9
 8000b12:	05d2      	lsls	r2, r2, #23
 8000b14:	0a40      	lsrs	r0, r0, #9
 8000b16:	07e4      	lsls	r4, r4, #31
 8000b18:	4310      	orrs	r0, r2
 8000b1a:	4320      	orrs	r0, r4
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	e7f4      	b.n	8000b10 <__aeabi_i2f+0x74>
 8000b26:	0268      	lsls	r0, r5, #9
 8000b28:	0a40      	lsrs	r0, r0, #9
 8000b2a:	e7f1      	b.n	8000b10 <__aeabi_i2f+0x74>
 8000b2c:	fbffffff 	.word	0xfbffffff

08000b30 <__aeabi_ui2f>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	1e04      	subs	r4, r0, #0
 8000b34:	d034      	beq.n	8000ba0 <__aeabi_ui2f+0x70>
 8000b36:	f000 f875 	bl	8000c24 <__clzsi2>
 8000b3a:	229e      	movs	r2, #158	; 0x9e
 8000b3c:	1a12      	subs	r2, r2, r0
 8000b3e:	2a96      	cmp	r2, #150	; 0x96
 8000b40:	dc07      	bgt.n	8000b52 <__aeabi_ui2f+0x22>
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	2808      	cmp	r0, #8
 8000b46:	dd2e      	ble.n	8000ba6 <__aeabi_ui2f+0x76>
 8000b48:	3808      	subs	r0, #8
 8000b4a:	4084      	lsls	r4, r0
 8000b4c:	0260      	lsls	r0, r4, #9
 8000b4e:	0a40      	lsrs	r0, r0, #9
 8000b50:	e021      	b.n	8000b96 <__aeabi_ui2f+0x66>
 8000b52:	2a99      	cmp	r2, #153	; 0x99
 8000b54:	dd09      	ble.n	8000b6a <__aeabi_ui2f+0x3a>
 8000b56:	0003      	movs	r3, r0
 8000b58:	0021      	movs	r1, r4
 8000b5a:	331b      	adds	r3, #27
 8000b5c:	4099      	lsls	r1, r3
 8000b5e:	1e4b      	subs	r3, r1, #1
 8000b60:	4199      	sbcs	r1, r3
 8000b62:	2305      	movs	r3, #5
 8000b64:	1a1b      	subs	r3, r3, r0
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	430c      	orrs	r4, r1
 8000b6a:	2805      	cmp	r0, #5
 8000b6c:	dd01      	ble.n	8000b72 <__aeabi_ui2f+0x42>
 8000b6e:	1f43      	subs	r3, r0, #5
 8000b70:	409c      	lsls	r4, r3
 8000b72:	0023      	movs	r3, r4
 8000b74:	490d      	ldr	r1, [pc, #52]	; (8000bac <__aeabi_ui2f+0x7c>)
 8000b76:	400b      	ands	r3, r1
 8000b78:	0765      	lsls	r5, r4, #29
 8000b7a:	d009      	beq.n	8000b90 <__aeabi_ui2f+0x60>
 8000b7c:	250f      	movs	r5, #15
 8000b7e:	402c      	ands	r4, r5
 8000b80:	2c04      	cmp	r4, #4
 8000b82:	d005      	beq.n	8000b90 <__aeabi_ui2f+0x60>
 8000b84:	3304      	adds	r3, #4
 8000b86:	015c      	lsls	r4, r3, #5
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_ui2f+0x60>
 8000b8a:	229f      	movs	r2, #159	; 0x9f
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	0a58      	lsrs	r0, r3, #9
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	0240      	lsls	r0, r0, #9
 8000b98:	05d2      	lsls	r2, r2, #23
 8000b9a:	0a40      	lsrs	r0, r0, #9
 8000b9c:	4310      	orrs	r0, r2
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	e7f7      	b.n	8000b96 <__aeabi_ui2f+0x66>
 8000ba6:	0260      	lsls	r0, r4, #9
 8000ba8:	0a40      	lsrs	r0, r0, #9
 8000baa:	e7f4      	b.n	8000b96 <__aeabi_ui2f+0x66>
 8000bac:	fbffffff 	.word	0xfbffffff

08000bb0 <__aeabi_cfrcmple>:
 8000bb0:	4684      	mov	ip, r0
 8000bb2:	1c08      	adds	r0, r1, #0
 8000bb4:	4661      	mov	r1, ip
 8000bb6:	e7ff      	b.n	8000bb8 <__aeabi_cfcmpeq>

08000bb8 <__aeabi_cfcmpeq>:
 8000bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000bba:	f000 f8c7 	bl	8000d4c <__lesf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d401      	bmi.n	8000bc6 <__aeabi_cfcmpeq+0xe>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	42c8      	cmn	r0, r1
 8000bc6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000bc8 <__aeabi_fcmpeq>:
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	f000 f849 	bl	8000c60 <__eqsf2>
 8000bce:	4240      	negs	r0, r0
 8000bd0:	3001      	adds	r0, #1
 8000bd2:	bd10      	pop	{r4, pc}

08000bd4 <__aeabi_fcmplt>:
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	f000 f8b9 	bl	8000d4c <__lesf2>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	db01      	blt.n	8000be2 <__aeabi_fcmplt+0xe>
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	2001      	movs	r0, #1
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fcmple>:
 8000be8:	b510      	push	{r4, lr}
 8000bea:	f000 f8af 	bl	8000d4c <__lesf2>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	dd01      	ble.n	8000bf6 <__aeabi_fcmple+0xe>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)

08000bfc <__aeabi_fcmpgt>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	f000 f857 	bl	8000cb0 <__gesf2>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	dc01      	bgt.n	8000c0a <__aeabi_fcmpgt+0xe>
 8000c06:	2000      	movs	r0, #0
 8000c08:	bd10      	pop	{r4, pc}
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fcmpge>:
 8000c10:	b510      	push	{r4, lr}
 8000c12:	f000 f84d 	bl	8000cb0 <__gesf2>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	da01      	bge.n	8000c1e <__aeabi_fcmpge+0xe>
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	2001      	movs	r0, #1
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)

08000c24 <__clzsi2>:
 8000c24:	211c      	movs	r1, #28
 8000c26:	2301      	movs	r3, #1
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	4298      	cmp	r0, r3
 8000c2c:	d301      	bcc.n	8000c32 <__clzsi2+0xe>
 8000c2e:	0c00      	lsrs	r0, r0, #16
 8000c30:	3910      	subs	r1, #16
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	4298      	cmp	r0, r3
 8000c36:	d301      	bcc.n	8000c3c <__clzsi2+0x18>
 8000c38:	0a00      	lsrs	r0, r0, #8
 8000c3a:	3908      	subs	r1, #8
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d301      	bcc.n	8000c46 <__clzsi2+0x22>
 8000c42:	0900      	lsrs	r0, r0, #4
 8000c44:	3904      	subs	r1, #4
 8000c46:	a202      	add	r2, pc, #8	; (adr r2, 8000c50 <__clzsi2+0x2c>)
 8000c48:	5c10      	ldrb	r0, [r2, r0]
 8000c4a:	1840      	adds	r0, r0, r1
 8000c4c:	4770      	bx	lr
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	02020304 	.word	0x02020304
 8000c54:	01010101 	.word	0x01010101
	...

08000c60 <__eqsf2>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	0042      	lsls	r2, r0, #1
 8000c64:	024e      	lsls	r6, r1, #9
 8000c66:	004c      	lsls	r4, r1, #1
 8000c68:	0245      	lsls	r5, r0, #9
 8000c6a:	0a6d      	lsrs	r5, r5, #9
 8000c6c:	0e12      	lsrs	r2, r2, #24
 8000c6e:	0fc3      	lsrs	r3, r0, #31
 8000c70:	0a76      	lsrs	r6, r6, #9
 8000c72:	0e24      	lsrs	r4, r4, #24
 8000c74:	0fc9      	lsrs	r1, r1, #31
 8000c76:	2aff      	cmp	r2, #255	; 0xff
 8000c78:	d00f      	beq.n	8000c9a <__eqsf2+0x3a>
 8000c7a:	2cff      	cmp	r4, #255	; 0xff
 8000c7c:	d011      	beq.n	8000ca2 <__eqsf2+0x42>
 8000c7e:	2001      	movs	r0, #1
 8000c80:	42a2      	cmp	r2, r4
 8000c82:	d000      	beq.n	8000c86 <__eqsf2+0x26>
 8000c84:	bd70      	pop	{r4, r5, r6, pc}
 8000c86:	42b5      	cmp	r5, r6
 8000c88:	d1fc      	bne.n	8000c84 <__eqsf2+0x24>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d00d      	beq.n	8000caa <__eqsf2+0x4a>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	d1f8      	bne.n	8000c84 <__eqsf2+0x24>
 8000c92:	0028      	movs	r0, r5
 8000c94:	1e45      	subs	r5, r0, #1
 8000c96:	41a8      	sbcs	r0, r5
 8000c98:	e7f4      	b.n	8000c84 <__eqsf2+0x24>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f1      	bne.n	8000c84 <__eqsf2+0x24>
 8000ca0:	e7eb      	b.n	8000c7a <__eqsf2+0x1a>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d1ed      	bne.n	8000c84 <__eqsf2+0x24>
 8000ca8:	e7e9      	b.n	8000c7e <__eqsf2+0x1e>
 8000caa:	2000      	movs	r0, #0
 8000cac:	e7ea      	b.n	8000c84 <__eqsf2+0x24>
 8000cae:	46c0      	nop			; (mov r8, r8)

08000cb0 <__gesf2>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	004a      	lsls	r2, r1, #1
 8000cb4:	024e      	lsls	r6, r1, #9
 8000cb6:	0245      	lsls	r5, r0, #9
 8000cb8:	0044      	lsls	r4, r0, #1
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	0e24      	lsrs	r4, r4, #24
 8000cbe:	0fc3      	lsrs	r3, r0, #31
 8000cc0:	0a76      	lsrs	r6, r6, #9
 8000cc2:	0e12      	lsrs	r2, r2, #24
 8000cc4:	0fc9      	lsrs	r1, r1, #31
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d015      	beq.n	8000cf6 <__gesf2+0x46>
 8000cca:	2aff      	cmp	r2, #255	; 0xff
 8000ccc:	d00e      	beq.n	8000cec <__gesf2+0x3c>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d115      	bne.n	8000cfe <__gesf2+0x4e>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d101      	bne.n	8000cda <__gesf2+0x2a>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d01c      	beq.n	8000d14 <__gesf2+0x64>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d014      	beq.n	8000d08 <__gesf2+0x58>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d027      	beq.n	8000d32 <__gesf2+0x82>
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	4018      	ands	r0, r3
 8000ce8:	3801      	subs	r0, #1
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0ee      	beq.n	8000cce <__gesf2+0x1e>
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	e7f9      	b.n	8000cea <__gesf2+0x3a>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d1fa      	bne.n	8000cf0 <__gesf2+0x40>
 8000cfa:	2aff      	cmp	r2, #255	; 0xff
 8000cfc:	d00e      	beq.n	8000d1c <__gesf2+0x6c>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d10e      	bne.n	8000d20 <__gesf2+0x70>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0ed      	beq.n	8000ce2 <__gesf2+0x32>
 8000d06:	e00b      	b.n	8000d20 <__gesf2+0x70>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	3901      	subs	r1, #1
 8000d0c:	4399      	bics	r1, r3
 8000d0e:	0008      	movs	r0, r1
 8000d10:	3001      	adds	r0, #1
 8000d12:	e7ea      	b.n	8000cea <__gesf2+0x3a>
 8000d14:	2000      	movs	r0, #0
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e7      	beq.n	8000cea <__gesf2+0x3a>
 8000d1a:	e7e2      	b.n	8000ce2 <__gesf2+0x32>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d1e7      	bne.n	8000cf0 <__gesf2+0x40>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d1de      	bne.n	8000ce2 <__gesf2+0x32>
 8000d24:	4294      	cmp	r4, r2
 8000d26:	dd05      	ble.n	8000d34 <__gesf2+0x84>
 8000d28:	2102      	movs	r1, #2
 8000d2a:	1e58      	subs	r0, r3, #1
 8000d2c:	4008      	ands	r0, r1
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7db      	b.n	8000cea <__gesf2+0x3a>
 8000d32:	2400      	movs	r4, #0
 8000d34:	42a2      	cmp	r2, r4
 8000d36:	dc04      	bgt.n	8000d42 <__gesf2+0x92>
 8000d38:	42b5      	cmp	r5, r6
 8000d3a:	d8d2      	bhi.n	8000ce2 <__gesf2+0x32>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	42b5      	cmp	r5, r6
 8000d40:	d2d3      	bcs.n	8000cea <__gesf2+0x3a>
 8000d42:	1e58      	subs	r0, r3, #1
 8000d44:	2301      	movs	r3, #1
 8000d46:	4398      	bics	r0, r3
 8000d48:	3001      	adds	r0, #1
 8000d4a:	e7ce      	b.n	8000cea <__gesf2+0x3a>

08000d4c <__lesf2>:
 8000d4c:	b530      	push	{r4, r5, lr}
 8000d4e:	0042      	lsls	r2, r0, #1
 8000d50:	0244      	lsls	r4, r0, #9
 8000d52:	024d      	lsls	r5, r1, #9
 8000d54:	0fc3      	lsrs	r3, r0, #31
 8000d56:	0048      	lsls	r0, r1, #1
 8000d58:	0a64      	lsrs	r4, r4, #9
 8000d5a:	0e12      	lsrs	r2, r2, #24
 8000d5c:	0a6d      	lsrs	r5, r5, #9
 8000d5e:	0e00      	lsrs	r0, r0, #24
 8000d60:	0fc9      	lsrs	r1, r1, #31
 8000d62:	2aff      	cmp	r2, #255	; 0xff
 8000d64:	d012      	beq.n	8000d8c <__lesf2+0x40>
 8000d66:	28ff      	cmp	r0, #255	; 0xff
 8000d68:	d00c      	beq.n	8000d84 <__lesf2+0x38>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d112      	bne.n	8000d94 <__lesf2+0x48>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d119      	bne.n	8000da6 <__lesf2+0x5a>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d117      	bne.n	8000da6 <__lesf2+0x5a>
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d02b      	beq.n	8000dd2 <__lesf2+0x86>
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	4018      	ands	r0, r3
 8000d80:	3801      	subs	r0, #1
 8000d82:	e026      	b.n	8000dd2 <__lesf2+0x86>
 8000d84:	2d00      	cmp	r5, #0
 8000d86:	d0f0      	beq.n	8000d6a <__lesf2+0x1e>
 8000d88:	2002      	movs	r0, #2
 8000d8a:	e022      	b.n	8000dd2 <__lesf2+0x86>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d1fb      	bne.n	8000d88 <__lesf2+0x3c>
 8000d90:	28ff      	cmp	r0, #255	; 0xff
 8000d92:	d01f      	beq.n	8000dd4 <__lesf2+0x88>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d11f      	bne.n	8000dd8 <__lesf2+0x8c>
 8000d98:	2d00      	cmp	r5, #0
 8000d9a:	d11d      	bne.n	8000dd8 <__lesf2+0x8c>
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	4018      	ands	r0, r3
 8000da2:	3801      	subs	r0, #1
 8000da4:	e015      	b.n	8000dd2 <__lesf2+0x86>
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	d00e      	beq.n	8000dc8 <__lesf2+0x7c>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d1e5      	bne.n	8000d7a <__lesf2+0x2e>
 8000dae:	2200      	movs	r2, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	dc04      	bgt.n	8000dbe <__lesf2+0x72>
 8000db4:	42ac      	cmp	r4, r5
 8000db6:	d8e0      	bhi.n	8000d7a <__lesf2+0x2e>
 8000db8:	2000      	movs	r0, #0
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	d209      	bcs.n	8000dd2 <__lesf2+0x86>
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	4398      	bics	r0, r3
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	e004      	b.n	8000dd2 <__lesf2+0x86>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	3901      	subs	r1, #1
 8000dcc:	4399      	bics	r1, r3
 8000dce:	0008      	movs	r0, r1
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	bd30      	pop	{r4, r5, pc}
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	d1d7      	bne.n	8000d88 <__lesf2+0x3c>
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d1ce      	bne.n	8000d7a <__lesf2+0x2e>
 8000ddc:	4282      	cmp	r2, r0
 8000dde:	dde7      	ble.n	8000db0 <__lesf2+0x64>
 8000de0:	2102      	movs	r1, #2
 8000de2:	1e58      	subs	r0, r3, #1
 8000de4:	4008      	ands	r0, r1
 8000de6:	3801      	subs	r0, #1
 8000de8:	e7f3      	b.n	8000dd2 <__lesf2+0x86>
 8000dea:	46c0      	nop			; (mov r8, r8)

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b08d      	sub	sp, #52	; 0x34
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f000 ffcb 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f9bd 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 fac1 	bl	8001380 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dfe:	f000 fa2f 	bl	8001260 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000e02:	4bd5      	ldr	r3, [pc, #852]	; (8001158 <main+0x36c>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fc3d 	bl	8002684 <HAL_ADC_Start>
  *GPIOA_ODR = (*GPIOA_ODR & 0xFFFF0000) + 0x6600;					//Configure the output register with the bit wheel
 8000e0a:	4bd4      	ldr	r3, [pc, #848]	; (800115c <main+0x370>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	041a      	lsls	r2, r3, #16
 8000e14:	4bd1      	ldr	r3, [pc, #836]	; (800115c <main+0x370>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	21cc      	movs	r1, #204	; 0xcc
 8000e1a:	01c9      	lsls	r1, r1, #7
 8000e1c:	468c      	mov	ip, r1
 8000e1e:	4462      	add	r2, ip
 8000e20:	601a      	str	r2, [r3, #0]
  uint16_t calSwRead = (uint16_t)(*GPIOA_IDR) & 0x1;				//calSw = GPIOA_PIN0 status
 8000e22:	4bcf      	ldr	r3, [pc, #828]	; (8001160 <main+0x374>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	2022      	movs	r0, #34	; 0x22
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	2101      	movs	r1, #1
 8000e30:	400a      	ands	r2, r1
 8000e32:	801a      	strh	r2, [r3, #0]
  uint8_t  calSw = 0;
 8000e34:	232f      	movs	r3, #47	; 0x2f
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  if (calSwRead) calSw = 1;
 8000e3c:	183b      	adds	r3, r7, r0
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <main+0x60>
 8000e44:	232f      	movs	r3, #47	; 0x2f
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
  uint8_t 	calFlashSlot = getCalFlashSlot(calSw);
 8000e4c:	2121      	movs	r1, #33	; 0x21
 8000e4e:	000d      	movs	r5, r1
 8000e50:	187c      	adds	r4, r7, r1
 8000e52:	262f      	movs	r6, #47	; 0x2f
 8000e54:	19bb      	adds	r3, r7, r6
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fae7 	bl	800142c <getCalFlashSlot>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	7023      	strb	r3, [r4, #0]
  uint32_t 	w1 = *(PAGE15_SLOT1 + ((calFlashSlot)*2));
 8000e62:	4bc0      	ldr	r3, [pc, #768]	; (8001164 <main+0x378>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	0029      	movs	r1, r5
 8000e68:	187a      	adds	r2, r7, r1
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t 	w2 = *(PAGE15_SLOT1 + ((calFlashSlot)*2) + 1);
 8000e74:	4bbb      	ldr	r3, [pc, #748]	; (8001164 <main+0x378>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	3304      	adds	r3, #4
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
  uint16_t 	w1a = (uint16_t)(w1>>16);
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	0c1a      	lsrs	r2, r3, #16
 8000e8a:	2116      	movs	r1, #22
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	801a      	strh	r2, [r3, #0]
  uint16_t 	neutral16 = (uint16_t) w1;
 8000e90:	2314      	movs	r3, #20
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	801a      	strh	r2, [r3, #0]
  uint16_t 	calFactAInt = (uint16_t)(w2>>16);
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	0c1a      	lsrs	r2, r3, #16
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	801a      	strh	r2, [r3, #0]
  uint16_t 	calFactBInt = (uint16_t) w2;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	801a      	strh	r2, [r3, #0]
  uint16_t 	min = w1a & 0x7FFF;
 8000eaa:	230e      	movs	r3, #14
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	187a      	adds	r2, r7, r1
 8000eb0:	8812      	ldrh	r2, [r2, #0]
 8000eb2:	0452      	lsls	r2, r2, #17
 8000eb4:	0c52      	lsrs	r2, r2, #17
 8000eb6:	801a      	strh	r2, [r3, #0]
  uint8_t  	calSwOld = (uint8_t)(w1a >> 15);
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	0bdb      	lsrs	r3, r3, #15
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	210d      	movs	r1, #13
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
  if (calSwOld != calSw){
 8000ec6:	187a      	adds	r2, r7, r1
 8000ec8:	19bb      	adds	r3, r7, r6
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d00e      	beq.n	8000ef0 <main+0x104>
  	calFlashSlot++;
 8000ed2:	2121      	movs	r1, #33	; 0x21
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	3201      	adds	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
    	calibration(calSw, calFlashSlot);
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	232f      	movs	r3, #47	; 0x2f
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 faea 	bl	80014c4 <calibration>
  }
  float    	calFactA = (float)calFactAInt / 10000;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fe1a 	bl	8000b30 <__aeabi_ui2f>
 8000efc:	1c03      	adds	r3, r0, #0
 8000efe:	499a      	ldr	r1, [pc, #616]	; (8001168 <main+0x37c>)
 8000f00:	1c18      	adds	r0, r3, #0
 8000f02:	f7ff f9a3 	bl	800024c <__aeabi_fdiv>
 8000f06:	1c03      	adds	r3, r0, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  float    	calFactB = (float)calFactBInt / 10000;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fe0d 	bl	8000b30 <__aeabi_ui2f>
 8000f16:	1c03      	adds	r3, r0, #0
 8000f18:	4993      	ldr	r1, [pc, #588]	; (8001168 <main+0x37c>)
 8000f1a:	1c18      	adds	r0, r3, #0
 8000f1c:	f7ff f996 	bl	800024c <__aeabi_fdiv>
 8000f20:	1c03      	adds	r3, r0, #0
 8000f22:	607b      	str	r3, [r7, #4]

  uint16_t 	value16, value16Old, value16Raw;
  int16_t 	steps = 0, pos = 0;
 8000f24:	2326      	movs	r3, #38	; 0x26
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	801a      	strh	r2, [r3, #0]
 8000f2c:	2324      	movs	r3, #36	; 0x24
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	801a      	strh	r2, [r3, #0]
  uint16_t	stepScale = 0;
 8000f34:	1cbb      	adds	r3, r7, #2
 8000f36:	2200      	movs	r2, #0
 8000f38:	801a      	strh	r2, [r3, #0]
  value16Old = 2048;
 8000f3a:	232a      	movs	r3, #42	; 0x2a
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	801a      	strh	r2, [r3, #0]
  stepScale = 4096 / (MAX_RANGE * 2);
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	2216      	movs	r2, #22
 8000f48:	801a      	strh	r2, [r3, #0]

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
  	  value16Raw = getValue();
 8000f4a:	2528      	movs	r5, #40	; 0x28
 8000f4c:	197c      	adds	r4, r7, r5
 8000f4e:	f000 fddb 	bl	8001b08 <getValue>
 8000f52:	0003      	movs	r3, r0
 8000f54:	8023      	strh	r3, [r4, #0]
  	  if (value16Raw < neutral16){
 8000f56:	197a      	adds	r2, r7, r5
 8000f58:	2314      	movs	r3, #20
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	8812      	ldrh	r2, [r2, #0]
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d22a      	bcs.n	8000fba <main+0x1ce>
  		  if (value16Raw < min) value16Raw = min;
 8000f64:	2328      	movs	r3, #40	; 0x28
 8000f66:	18fa      	adds	r2, r7, r3
 8000f68:	230e      	movs	r3, #14
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	8812      	ldrh	r2, [r2, #0]
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d205      	bcs.n	8000f80 <main+0x194>
 8000f74:	2328      	movs	r3, #40	; 0x28
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	220e      	movs	r2, #14
 8000f7a:	18ba      	adds	r2, r7, r2
 8000f7c:	8812      	ldrh	r2, [r2, #0]
 8000f7e:	801a      	strh	r2, [r3, #0]
  		  value16 = value16Raw - min;
 8000f80:	202c      	movs	r0, #44	; 0x2c
 8000f82:	183b      	adds	r3, r7, r0
 8000f84:	2228      	movs	r2, #40	; 0x28
 8000f86:	18b9      	adds	r1, r7, r2
 8000f88:	220e      	movs	r2, #14
 8000f8a:	18ba      	adds	r2, r7, r2
 8000f8c:	8809      	ldrh	r1, [r1, #0]
 8000f8e:	8812      	ldrh	r2, [r2, #0]
 8000f90:	1a8a      	subs	r2, r1, r2
 8000f92:	801a      	strh	r2, [r3, #0]
  		  value16 = value16 * calFactA;
 8000f94:	0004      	movs	r4, r0
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff fd7e 	bl	8000a9c <__aeabi_i2f>
 8000fa0:	1c03      	adds	r3, r0, #0
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	1c18      	adds	r0, r3, #0
 8000fa6:	f7ff fa63 	bl	8000470 <__aeabi_fmul>
 8000faa:	1c03      	adds	r3, r0, #0
 8000fac:	0020      	movs	r0, r4
 8000fae:	183c      	adds	r4, r7, r0
 8000fb0:	1c18      	adds	r0, r3, #0
 8000fb2:	f7ff f933 	bl	800021c <__aeabi_f2uiz>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	8023      	strh	r3, [r4, #0]
  	  }
  	  if (value16Raw == neutral16)	value16 = neutral16;
 8000fba:	2328      	movs	r3, #40	; 0x28
 8000fbc:	18fa      	adds	r2, r7, r3
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d105      	bne.n	8000fd6 <main+0x1ea>
 8000fca:	232c      	movs	r3, #44	; 0x2c
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2214      	movs	r2, #20
 8000fd0:	18ba      	adds	r2, r7, r2
 8000fd2:	8812      	ldrh	r2, [r2, #0]
 8000fd4:	801a      	strh	r2, [r3, #0]
  	  if (value16Raw > neutral16){
 8000fd6:	2328      	movs	r3, #40	; 0x28
 8000fd8:	18fa      	adds	r2, r7, r3
 8000fda:	2314      	movs	r3, #20
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d927      	bls.n	8001036 <main+0x24a>
  		  value16 = value16Raw - neutral16;
 8000fe6:	202c      	movs	r0, #44	; 0x2c
 8000fe8:	183b      	adds	r3, r7, r0
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	18b9      	adds	r1, r7, r2
 8000fee:	2214      	movs	r2, #20
 8000ff0:	18ba      	adds	r2, r7, r2
 8000ff2:	8809      	ldrh	r1, [r1, #0]
 8000ff4:	8812      	ldrh	r2, [r2, #0]
 8000ff6:	1a8a      	subs	r2, r1, r2
 8000ff8:	801a      	strh	r2, [r3, #0]
  		  value16 = value16 * calFactB;
 8000ffa:	0004      	movs	r4, r0
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fd4b 	bl	8000a9c <__aeabi_i2f>
 8001006:	1c03      	adds	r3, r0, #0
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	1c18      	adds	r0, r3, #0
 800100c:	f7ff fa30 	bl	8000470 <__aeabi_fmul>
 8001010:	1c03      	adds	r3, r0, #0
 8001012:	0020      	movs	r0, r4
 8001014:	0005      	movs	r5, r0
 8001016:	183c      	adds	r4, r7, r0
 8001018:	1c18      	adds	r0, r3, #0
 800101a:	f7ff f8ff 	bl	800021c <__aeabi_f2uiz>
 800101e:	0003      	movs	r3, r0
 8001020:	8023      	strh	r3, [r4, #0]
  		  value16 = value16 + 2048;
 8001022:	0028      	movs	r0, r5
 8001024:	183b      	adds	r3, r7, r0
 8001026:	0004      	movs	r4, r0
 8001028:	193a      	adds	r2, r7, r4
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0109      	lsls	r1, r1, #4
 8001030:	468c      	mov	ip, r1
 8001032:	4462      	add	r2, ip
 8001034:	801a      	strh	r2, [r3, #0]
  	  }
  	  if (value16 > 2048 - DEADZONE && value16 < 2048 + DEADZONE){
 8001036:	232c      	movs	r3, #44	; 0x2c
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <main+0x380>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d935      	bls.n	80010ae <main+0x2c2>
 8001042:	232c      	movs	r3, #44	; 0x2c
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4a49      	ldr	r2, [pc, #292]	; (8001170 <main+0x384>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d82f      	bhi.n	80010ae <main+0x2c2>
  		  value16Old = value16;
 800104e:	232a      	movs	r3, #42	; 0x2a
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	222c      	movs	r2, #44	; 0x2c
 8001054:	18ba      	adds	r2, r7, r2
 8001056:	8812      	ldrh	r2, [r2, #0]
 8001058:	801a      	strh	r2, [r3, #0]
  		  while (pos > 0){
 800105a:	e00d      	b.n	8001078 <main+0x28c>
  			  rotateLeft(GPIOA_ODR);
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <main+0x370>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fd6b 	bl	8001b3c <rotateLeft>
  			  pos--;
 8001066:	2124      	movs	r1, #36	; 0x24
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2200      	movs	r2, #0
 800106c:	5e9b      	ldrsh	r3, [r3, r2]
 800106e:	b29b      	uxth	r3, r3
 8001070:	3b01      	subs	r3, #1
 8001072:	b29a      	uxth	r2, r3
 8001074:	187b      	adds	r3, r7, r1
 8001076:	801a      	strh	r2, [r3, #0]
  		  while (pos > 0){
 8001078:	2324      	movs	r3, #36	; 0x24
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2200      	movs	r2, #0
 800107e:	5e9b      	ldrsh	r3, [r3, r2]
 8001080:	2b00      	cmp	r3, #0
 8001082:	dceb      	bgt.n	800105c <main+0x270>
  		  }
  		  while (pos < 0){
 8001084:	e00d      	b.n	80010a2 <main+0x2b6>
  			  rotateRight(GPIOA_ODR);
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <main+0x370>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fd8a 	bl	8001ba4 <rotateRight>
  			  pos++;
 8001090:	2124      	movs	r1, #36	; 0x24
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	5e9b      	ldrsh	r3, [r3, r2]
 8001098:	b29b      	uxth	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	801a      	strh	r2, [r3, #0]
  		  while (pos < 0){
 80010a2:	2324      	movs	r3, #36	; 0x24
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	5e9b      	ldrsh	r3, [r3, r2]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dbeb      	blt.n	8001086 <main+0x29a>
  		  }
  	  }
  	  steps = steps + ((int16_t)value16 - value16Old);
 80010ae:	212c      	movs	r1, #44	; 0x2c
 80010b0:	187a      	adds	r2, r7, r1
 80010b2:	202a      	movs	r0, #42	; 0x2a
 80010b4:	183b      	adds	r3, r7, r0
 80010b6:	8812      	ldrh	r2, [r2, #0]
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b29a      	uxth	r2, r3
 80010be:	2426      	movs	r4, #38	; 0x26
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	18d3      	adds	r3, r2, r3
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	801a      	strh	r2, [r3, #0]
  	  value16Old = value16;
 80010cc:	183b      	adds	r3, r7, r0
 80010ce:	187a      	adds	r2, r7, r1
 80010d0:	8812      	ldrh	r2, [r2, #0]
 80010d2:	801a      	strh	r2, [r3, #0]
  	  while (steps < -stepScale){
 80010d4:	e016      	b.n	8001104 <main+0x318>
  		  rotateLeft(GPIOA_ODR);
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <main+0x370>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 fd2e 	bl	8001b3c <rotateLeft>
  		  steps = steps + stepScale;
 80010e0:	2126      	movs	r1, #38	; 0x26
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	1cbb      	adds	r3, r7, #2
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	18d3      	adds	r3, r2, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	801a      	strh	r2, [r3, #0]
  		  pos--;
 80010f2:	2124      	movs	r1, #36	; 0x24
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	5e9b      	ldrsh	r3, [r3, r2]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b29a      	uxth	r2, r3
 8001100:	187b      	adds	r3, r7, r1
 8001102:	801a      	strh	r2, [r3, #0]
  	  while (steps < -stepScale){
 8001104:	2326      	movs	r3, #38	; 0x26
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2200      	movs	r2, #0
 800110a:	5e9a      	ldrsh	r2, [r3, r2]
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	425b      	negs	r3, r3
 8001112:	429a      	cmp	r2, r3
 8001114:	dbdf      	blt.n	80010d6 <main+0x2ea>
  	  }
  	  while (steps > stepScale){
 8001116:	e016      	b.n	8001146 <main+0x35a>
  		  rotateRight(GPIOA_ODR);
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <main+0x370>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fd41 	bl	8001ba4 <rotateRight>
  		  steps = steps - stepScale;
 8001122:	2126      	movs	r1, #38	; 0x26
 8001124:	187b      	adds	r3, r7, r1
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	1cbb      	adds	r3, r7, #2
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	b29a      	uxth	r2, r3
 8001130:	187b      	adds	r3, r7, r1
 8001132:	801a      	strh	r2, [r3, #0]
  		  pos++;
 8001134:	2124      	movs	r1, #36	; 0x24
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2200      	movs	r2, #0
 800113a:	5e9b      	ldrsh	r3, [r3, r2]
 800113c:	b29b      	uxth	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	b29a      	uxth	r2, r3
 8001142:	187b      	adds	r3, r7, r1
 8001144:	801a      	strh	r2, [r3, #0]
  	  while (steps > stepScale){
 8001146:	2326      	movs	r3, #38	; 0x26
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	2200      	movs	r2, #0
 800114c:	5e9a      	ldrsh	r2, [r3, r2]
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	dce0      	bgt.n	8001118 <main+0x32c>
  	  value16Raw = getValue();
 8001156:	e6f8      	b.n	8000f4a <main+0x15e>
 8001158:	20000044 	.word	0x20000044
 800115c:	20000010 	.word	0x20000010
 8001160:	2000000c 	.word	0x2000000c
 8001164:	20000008 	.word	0x20000008
 8001168:	461c4000 	.word	0x461c4000
 800116c:	00000706 	.word	0x00000706
 8001170:	000008f9 	.word	0x000008f9

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b09d      	sub	sp, #116	; 0x74
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	2438      	movs	r4, #56	; 0x38
 800117c:	193b      	adds	r3, r7, r4
 800117e:	0018      	movs	r0, r3
 8001180:	2338      	movs	r3, #56	; 0x38
 8001182:	001a      	movs	r2, r3
 8001184:	2100      	movs	r1, #0
 8001186:	f003 f97f 	bl	8004488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118a:	2328      	movs	r3, #40	; 0x28
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	0018      	movs	r0, r3
 8001190:	2310      	movs	r3, #16
 8001192:	001a      	movs	r2, r3
 8001194:	2100      	movs	r1, #0
 8001196:	f003 f977 	bl	8004488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119a:	003b      	movs	r3, r7
 800119c:	0018      	movs	r0, r3
 800119e:	2328      	movs	r3, #40	; 0x28
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f003 f970 	bl	8004488 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 fae3 	bl	8003778 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2202      	movs	r2, #2
 80011b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011c0:	0021      	movs	r1, r4
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2202      	movs	r2, #2
 80011d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2202      	movs	r2, #2
 80011d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2208      	movs	r2, #8
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0292      	lsls	r2, r2, #10
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0492      	lsls	r2, r2, #18
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	0592      	lsls	r2, r2, #22
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	0018      	movs	r0, r3
 8001202:	f002 faf9 	bl	80037f8 <HAL_RCC_OscConfig>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800120a:	f000 fcff 	bl	8001c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	2128      	movs	r1, #40	; 0x28
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2207      	movs	r2, #7
 8001214:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2202      	movs	r2, #2
 800121a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2102      	movs	r1, #2
 800122c:	0018      	movs	r0, r3
 800122e:	f002 fe03 	bl	8003e38 <HAL_RCC_ClockConfig>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001236:	f000 fce9 	bl	8001c0c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800123a:	003b      	movs	r3, r7
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	01d2      	lsls	r2, r2, #7
 8001240:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	003b      	movs	r3, r7
 800124a:	0018      	movs	r0, r3
 800124c:	f002 ff7e 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001254:	f000 fcda 	bl	8001c0c <Error_Handler>
  }
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b01d      	add	sp, #116	; 0x74
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001266:	2310      	movs	r3, #16
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	0018      	movs	r0, r3
 800126c:	2318      	movs	r3, #24
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f003 f909 	bl	8004488 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	0018      	movs	r0, r3
 800127a:	230c      	movs	r3, #12
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f003 f902 	bl	8004488 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <MX_ADC1_Init+0x114>)
 8001286:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <MX_ADC1_Init+0x118>)
 8001288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_ADC1_Init+0x114>)
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	05d2      	lsls	r2, r2, #23
 8001290:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <MX_ADC1_Init+0x114>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_ADC1_Init+0x114>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <MX_ADC1_Init+0x114>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <MX_ADC1_Init+0x114>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <MX_ADC1_Init+0x114>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_ADC1_Init+0x114>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_ADC1_Init+0x114>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_ADC1_Init+0x114>)
 80012be:	2201      	movs	r2, #1
 80012c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <MX_ADC1_Init+0x114>)
 80012c4:	2220      	movs	r2, #32
 80012c6:	2100      	movs	r1, #0
 80012c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_ADC1_Init+0x114>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_ADC1_Init+0x114>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_ADC1_Init+0x114>)
 80012d8:	222c      	movs	r2, #44	; 0x2c
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_ADC1_Init+0x114>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_ADC1_Init+0x114>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_ADC1_Init+0x114>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_ADC1_Init+0x114>)
 80012f2:	223c      	movs	r2, #60	; 0x3c
 80012f4:	2101      	movs	r1, #1
 80012f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_ADC1_Init+0x114>)
 80012fa:	2204      	movs	r2, #4
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_ADC1_Init+0x114>)
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_ADC1_Init+0x114>)
 8001306:	2200      	movs	r2, #0
 8001308:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_ADC1_Init+0x114>)
 800130c:	2200      	movs	r2, #0
 800130e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_ADC1_Init+0x114>)
 8001312:	0018      	movs	r0, r3
 8001314:	f000 ffe0 	bl	80022d8 <HAL_ADC_Init>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800131c:	f000 fc76 	bl	8001c0c <Error_Handler>
  }
  /** Configure Analog WatchDog 2 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001320:	2110      	movs	r1, #16
 8001322:	187b      	adds	r3, r7, r1
 8001324:	22c0      	movs	r2, #192	; 0xc0
 8001326:	0412      	lsls	r2, r2, #16
 8001328:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800132a:	187a      	adds	r2, r7, r1
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_ADC1_Init+0x114>)
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f001 fbc9 	bl	8002ac8 <HAL_ADC_AnalogWDGConfig>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800133a:	f000 fc67 	bl	8001c0c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4a0e      	ldr	r2, [pc, #56]	; (800137c <MX_ADC1_Init+0x11c>)
 8001342:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	1d3a      	adds	r2, r7, #4
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_ADC1_Init+0x114>)
 8001354:	0011      	movs	r1, r2
 8001356:	0018      	movs	r0, r3
 8001358:	f001 f9e2 	bl	8002720 <HAL_ADC_ConfigChannel>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001360:	f000 fc54 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <MX_ADC1_Init+0x114>)
 8001366:	0018      	movs	r0, r3
 8001368:	f001 ff0e 	bl	8003188 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b00a      	add	sp, #40	; 0x28
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000044 	.word	0x20000044
 8001378:	40012400 	.word	0x40012400
 800137c:	2c000800 	.word	0x2c000800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	240c      	movs	r4, #12
 8001388:	193b      	adds	r3, r7, r4
 800138a:	0018      	movs	r0, r3
 800138c:	2314      	movs	r3, #20
 800138e:	001a      	movs	r2, r3
 8001390:	2100      	movs	r1, #0
 8001392:	f003 f879 	bl	8004488 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_GPIO_Init+0xa8>)
 8001398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MX_GPIO_Init+0xa8>)
 800139c:	2102      	movs	r1, #2
 800139e:	430a      	orrs	r2, r1
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	2201      	movs	r2, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_0_Pin|OUT_1_Pin, GPIO_PIN_RESET);
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	0159      	lsls	r1, r3, #5
 80013ca:	23a0      	movs	r3, #160	; 0xa0
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	2200      	movs	r2, #0
 80013d0:	0018      	movs	r0, r3
 80013d2:	f002 f9b3 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAL_SW_Pin */
  GPIO_InitStruct.Pin = CAL_SW_Pin;
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CAL_SW_GPIO_Port, &GPIO_InitStruct);
 80013e8:	193a      	adds	r2, r7, r4
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f002 f83f 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_0_Pin OUT_1_Pin */
  GPIO_InitStruct.Pin = OUT_0_Pin|OUT_1_Pin;
 80013f6:	0021      	movs	r1, r4
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	22c0      	movs	r2, #192	; 0xc0
 80013fc:	0152      	lsls	r2, r2, #5
 80013fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2201      	movs	r2, #1
 8001404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	187b      	adds	r3, r7, r1
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	187a      	adds	r2, r7, r1
 8001414:	23a0      	movs	r3, #160	; 0xa0
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	0011      	movs	r1, r2
 800141a:	0018      	movs	r0, r3
 800141c:	f002 f82a 	bl	8003474 <HAL_GPIO_Init>

}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b009      	add	sp, #36	; 0x24
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	40021000 	.word	0x40021000

0800142c <getCalFlashSlot>:

/* USER CODE BEGIN 4 */
uint8_t getCalFlashSlot(uint8_t calSw){			//Finds the FLASH memory slot currently in use
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	0002      	movs	r2, r0
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	701a      	strb	r2, [r3, #0]
	uint16_t i = 0;
 8001438:	230e      	movs	r3, #14
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]
	uint32_t data = *PAGE15_SLOT1;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <getCalFlashSlot+0x94>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60bb      	str	r3, [r7, #8]
	while (((data != 0xFFFFFFFF) && i < 256)){
 8001448:	e00d      	b.n	8001466 <getCalFlashSlot+0x3a>
		i++;
 800144a:	210e      	movs	r1, #14
 800144c:	187b      	adds	r3, r7, r1
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	187b      	adds	r3, r7, r1
 8001452:	3201      	adds	r2, #1
 8001454:	801a      	strh	r2, [r3, #0]
		data = *(PAGE15_SLOT1 + i*2);
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <getCalFlashSlot+0x94>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	187a      	adds	r2, r7, r1
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	00d2      	lsls	r2, r2, #3
 8001460:	189b      	adds	r3, r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60bb      	str	r3, [r7, #8]
	while (((data != 0xFFFFFFFF) && i < 256)){
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	d004      	beq.n	8001476 <getCalFlashSlot+0x4a>
 800146c:	230e      	movs	r3, #14
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d9e9      	bls.n	800144a <getCalFlashSlot+0x1e>
	}
	if(i == 0) calibration(calSw, 0);
 8001476:	230e      	movs	r3, #14
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <getCalFlashSlot+0x60>
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2100      	movs	r1, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f81c 	bl	80014c4 <calibration>
	if(i == 256){						//erase flash if it's full
 800148c:	230e      	movs	r3, #14
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	881a      	ldrh	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	429a      	cmp	r2, r3
 8001498:	d107      	bne.n	80014aa <getCalFlashSlot+0x7e>
			eraseFlash();
 800149a:	f000 faed 	bl	8001a78 <eraseFlash>
			calibration(calSw, 0);
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f80d 	bl	80014c4 <calibration>
		}
	return (uint8_t)(i-1);
 80014aa:	230e      	movs	r3, #14
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b2db      	uxtb	r3, r3
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000008 	.word	0x20000008

080014c4 <calibration>:

void calibration(uint8_t calSw, uint8_t calFlashSlot){			//CALIBRATION v2.0
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b091      	sub	sp, #68	; 0x44
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	1c0a      	adds	r2, r1, #0
 80014d4:	701a      	strb	r2, [r3, #0]

//PHASE 1 - Calculating neutral value
uint32_t 	value32=0, i=0, j=0, neutral32=0, w1=0xFFFFFFFF,w2=0xFFFFFFFF;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014da:	2300      	movs	r3, #0
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
 80014e6:	2301      	movs	r3, #1
 80014e8:	425b      	negs	r3, r3
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	2301      	movs	r3, #1
 80014ee:	425b      	negs	r3, r3
 80014f0:	61bb      	str	r3, [r7, #24]
uint16_t 	value16=0, max=0, min=0, count=0, neutralAverage=0, neutralAverageOld=0;
 80014f2:	242e      	movs	r4, #46	; 0x2e
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	232c      	movs	r3, #44	; 0x2c
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	232a      	movs	r3, #42	; 0x2a
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	2200      	movs	r2, #0
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	2326      	movs	r3, #38	; 0x26
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2200      	movs	r2, #0
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	2324      	movs	r3, #36	; 0x24
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
uint16_t 	w1a=0xFFFF, w1b=0xFFFF, w2a=0xFFFF, w2b=0xFFFF;
 8001522:	2316      	movs	r3, #22
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2201      	movs	r2, #1
 8001528:	4252      	negs	r2, r2
 800152a:	801a      	strh	r2, [r3, #0]
 800152c:	2314      	movs	r3, #20
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	2201      	movs	r2, #1
 8001532:	4252      	negs	r2, r2
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	2312      	movs	r3, #18
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	2201      	movs	r2, #1
 800153c:	4252      	negs	r2, r2
 800153e:	801a      	strh	r2, [r3, #0]
 8001540:	2310      	movs	r3, #16
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2201      	movs	r2, #1
 8001546:	4252      	negs	r2, r2
 8001548:	801a      	strh	r2, [r3, #0]
uint8_t		neutralOK=0;
 800154a:	2323      	movs	r3, #35	; 0x23
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
float			calFactA=0.0, calFactB=0.0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]

 HAL_Delay(5000);
 800155a:	4ba3      	ldr	r3, [pc, #652]	; (80017e8 <calibration+0x324>)
 800155c:	0018      	movs	r0, r3
 800155e:	f000 fc99 	bl	8001e94 <HAL_Delay>

draw5();
 8001562:	f000 f94f 	bl	8001804 <draw5>

value16 = getValue();
 8001566:	193c      	adds	r4, r7, r4
 8001568:	f000 face 	bl	8001b08 <getValue>
 800156c:	0003      	movs	r3, r0
 800156e:	8023      	strh	r3, [r4, #0]

while (value16<1600 || value16>2400){			//Wait for joystick to be centered
 8001570:	e005      	b.n	800157e <calibration+0xba>
	value16 = getValue();
 8001572:	232e      	movs	r3, #46	; 0x2e
 8001574:	18fc      	adds	r4, r7, r3
 8001576:	f000 fac7 	bl	8001b08 <getValue>
 800157a:	0003      	movs	r3, r0
 800157c:	8023      	strh	r3, [r4, #0]
while (value16<1600 || value16>2400){			//Wait for joystick to be centered
 800157e:	232e      	movs	r3, #46	; 0x2e
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4a99      	ldr	r2, [pc, #612]	; (80017ec <calibration+0x328>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d9f3      	bls.n	8001572 <calibration+0xae>
 800158a:	232e      	movs	r3, #46	; 0x2e
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	2396      	movs	r3, #150	; 0x96
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	429a      	cmp	r2, r3
 8001596:	d8ec      	bhi.n	8001572 <calibration+0xae>
}
//Step 1.1 - Pull the stick to any corner and let go until neutral is OK
while (neutralOK<3){
 8001598:	e06f      	b.n	800167a <calibration+0x1b6>
	count++;
 800159a:	2128      	movs	r1, #40	; 0x28
 800159c:	187b      	adds	r3, r7, r1
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	3201      	adds	r2, #1
 80015a4:	801a      	strh	r2, [r3, #0]
	while (value16>1500 && value16<2500){			//Wait for joystick to be moved
 80015a6:	e005      	b.n	80015b4 <calibration+0xf0>
		value16 = getValue();
 80015a8:	232e      	movs	r3, #46	; 0x2e
 80015aa:	18fc      	adds	r4, r7, r3
 80015ac:	f000 faac 	bl	8001b08 <getValue>
 80015b0:	0003      	movs	r3, r0
 80015b2:	8023      	strh	r3, [r4, #0]
	while (value16>1500 && value16<2500){			//Wait for joystick to be moved
 80015b4:	232e      	movs	r3, #46	; 0x2e
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	4a8d      	ldr	r2, [pc, #564]	; (80017f0 <calibration+0x32c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d905      	bls.n	80015cc <calibration+0x108>
 80015c0:	232e      	movs	r3, #46	; 0x2e
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4a8b      	ldr	r2, [pc, #556]	; (80017f4 <calibration+0x330>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d9ed      	bls.n	80015a8 <calibration+0xe4>
	}
	HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f000 fc61 	bl	8001e94 <HAL_Delay>
	while (value16<1600 || value16>2400){			//Wait for joystick to return centered
 80015d2:	e005      	b.n	80015e0 <calibration+0x11c>
		value16 = getValue();
 80015d4:	232e      	movs	r3, #46	; 0x2e
 80015d6:	18fc      	adds	r4, r7, r3
 80015d8:	f000 fa96 	bl	8001b08 <getValue>
 80015dc:	0003      	movs	r3, r0
 80015de:	8023      	strh	r3, [r4, #0]
	while (value16<1600 || value16>2400){			//Wait for joystick to return centered
 80015e0:	232e      	movs	r3, #46	; 0x2e
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	4a81      	ldr	r2, [pc, #516]	; (80017ec <calibration+0x328>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d9f3      	bls.n	80015d4 <calibration+0x110>
 80015ec:	232e      	movs	r3, #46	; 0x2e
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	2396      	movs	r3, #150	; 0x96
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d8ec      	bhi.n	80015d4 <calibration+0x110>
	}
	HAL_Delay(500);														//Wait for spring to stabilize
 80015fa:	23fa      	movs	r3, #250	; 0xfa
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 fc48 	bl	8001e94 <HAL_Delay>
	for (i=0; i<16; i++){											//Get neutral value by averaging 16 readings
 8001604:	2300      	movs	r3, #0
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
 8001608:	e009      	b.n	800161e <calibration+0x15a>
		value32 = value32 + getValue();
 800160a:	f000 fa7d 	bl	8001b08 <getValue>
 800160e:	0003      	movs	r3, r0
 8001610:	001a      	movs	r2, r3
 8001612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001614:	189b      	adds	r3, r3, r2
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i=0; i<16; i++){											//Get neutral value by averaging 16 readings
 8001618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161a:	3301      	adds	r3, #1
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
 800161e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d9f2      	bls.n	800160a <calibration+0x146>
	}
	neutral32 = neutral32 + (value32/16);			//Add current neutral reading to pool
 8001624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800162a:	18d3      	adds	r3, r2, r3
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
	value32 = 0;									//Reset value32
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	; 0x3c
	neutralAverage = (neutral32/count);
 8001632:	2328      	movs	r3, #40	; 0x28
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	0019      	movs	r1, r3
 800163a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800163c:	f7fe fd62 	bl	8000104 <__udivsi3>
 8001640:	0003      	movs	r3, r0
 8001642:	001a      	movs	r2, r3
 8001644:	2126      	movs	r1, #38	; 0x26
 8001646:	187b      	adds	r3, r7, r1
 8001648:	801a      	strh	r2, [r3, #0]
	if (neutralAverage == neutralAverageOld) neutralOK++;
 800164a:	187a      	adds	r2, r7, r1
 800164c:	2324      	movs	r3, #36	; 0x24
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	8812      	ldrh	r2, [r2, #0]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d106      	bne.n	8001666 <calibration+0x1a2>
 8001658:	2123      	movs	r1, #35	; 0x23
 800165a:	187b      	adds	r3, r7, r1
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	187b      	adds	r3, r7, r1
 8001660:	3201      	adds	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e003      	b.n	800166e <calibration+0x1aa>
	else neutralOK = 0;
 8001666:	2323      	movs	r3, #35	; 0x23
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
	neutralAverageOld = neutralAverage;
 800166e:	2324      	movs	r3, #36	; 0x24
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2226      	movs	r2, #38	; 0x26
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	801a      	strh	r2, [r3, #0]
while (neutralOK<3){
 800167a:	2323      	movs	r3, #35	; 0x23
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d98a      	bls.n	800159a <calibration+0xd6>
}
draw5();
 8001684:	f000 f8be 	bl	8001804 <draw5>
//PHASE 2 - Calculating min and max while the stick is rotated
min = neutralAverage;
 8001688:	232a      	movs	r3, #42	; 0x2a
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2126      	movs	r1, #38	; 0x26
 800168e:	187a      	adds	r2, r7, r1
 8001690:	8812      	ldrh	r2, [r2, #0]
 8001692:	801a      	strh	r2, [r3, #0]
max = neutralAverage;
 8001694:	232c      	movs	r3, #44	; 0x2c
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	187a      	adds	r2, r7, r1
 800169a:	8812      	ldrh	r2, [r2, #0]
 800169c:	801a      	strh	r2, [r3, #0]
for (i=0; i<625000; i++){
 800169e:	2300      	movs	r3, #0
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80016a2:	e035      	b.n	8001710 <calibration+0x24c>
	for (j=0; j<16; j++){
 80016a4:	2300      	movs	r3, #0
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
 80016a8:	e009      	b.n	80016be <calibration+0x1fa>
		value32 = value32 + getValue();
 80016aa:	f000 fa2d 	bl	8001b08 <getValue>
 80016ae:	0003      	movs	r3, r0
 80016b0:	001a      	movs	r2, r3
 80016b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (j=0; j<16; j++){
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	3301      	adds	r3, #1
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d9f2      	bls.n	80016aa <calibration+0x1e6>
	}
	value16 = value32 / 16;
 80016c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c6:	091a      	lsrs	r2, r3, #4
 80016c8:	212e      	movs	r1, #46	; 0x2e
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	801a      	strh	r2, [r3, #0]
	value32 = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (value16 > max){
 80016d2:	187a      	adds	r2, r7, r1
 80016d4:	232c      	movs	r3, #44	; 0x2c
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d906      	bls.n	80016ee <calibration+0x22a>
		max = value16;
 80016e0:	232c      	movs	r3, #44	; 0x2c
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	222e      	movs	r2, #46	; 0x2e
 80016e6:	18ba      	adds	r2, r7, r2
 80016e8:	8812      	ldrh	r2, [r2, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
 80016ec:	e00d      	b.n	800170a <calibration+0x246>
	}else if(value16 < min){
 80016ee:	232e      	movs	r3, #46	; 0x2e
 80016f0:	18fa      	adds	r2, r7, r3
 80016f2:	232a      	movs	r3, #42	; 0x2a
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	8812      	ldrh	r2, [r2, #0]
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d205      	bcs.n	800170a <calibration+0x246>
		min = value16;
 80016fe:	232a      	movs	r3, #42	; 0x2a
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	222e      	movs	r2, #46	; 0x2e
 8001704:	18ba      	adds	r2, r7, r2
 8001706:	8812      	ldrh	r2, [r2, #0]
 8001708:	801a      	strh	r2, [r3, #0]
for (i=0; i<625000; i++){
 800170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170c:	3301      	adds	r3, #1
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001712:	4a39      	ldr	r2, [pc, #228]	; (80017f8 <calibration+0x334>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d9c5      	bls.n	80016a4 <calibration+0x1e0>
	}
}
//PHASE 3 - Calculating calFactA and calFactB
calFactA = ((float)2047) / (neutralAverage - min);
 8001718:	2426      	movs	r4, #38	; 0x26
 800171a:	193b      	adds	r3, r7, r4
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	252a      	movs	r5, #42	; 0x2a
 8001720:	197b      	adds	r3, r7, r5
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff f9b8 	bl	8000a9c <__aeabi_i2f>
 800172c:	1c03      	adds	r3, r0, #0
 800172e:	1c19      	adds	r1, r3, #0
 8001730:	4832      	ldr	r0, [pc, #200]	; (80017fc <calibration+0x338>)
 8001732:	f7fe fd8b 	bl	800024c <__aeabi_fdiv>
 8001736:	1c03      	adds	r3, r0, #0
 8001738:	60fb      	str	r3, [r7, #12]
calFactB = ((float)2048) / (max - neutralAverage);
 800173a:	232c      	movs	r3, #44	; 0x2c
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	193b      	adds	r3, r7, r4
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff f9a8 	bl	8000a9c <__aeabi_i2f>
 800174c:	1c03      	adds	r3, r0, #0
 800174e:	1c19      	adds	r1, r3, #0
 8001750:	208a      	movs	r0, #138	; 0x8a
 8001752:	05c0      	lsls	r0, r0, #23
 8001754:	f7fe fd7a 	bl	800024c <__aeabi_fdiv>
 8001758:	1c03      	adds	r3, r0, #0
 800175a:	60bb      	str	r3, [r7, #8]

	w2 =						w2a									w2b
				|--------------16bit--------------|---------------16bit---------------|
							 calFactA							calFactB
*/
w1a = min + ((uint16_t)calSw << 15);
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	03db      	lsls	r3, r3, #15
 8001764:	b299      	uxth	r1, r3
 8001766:	2616      	movs	r6, #22
 8001768:	19bb      	adds	r3, r7, r6
 800176a:	197a      	adds	r2, r7, r5
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	188a      	adds	r2, r1, r2
 8001770:	801a      	strh	r2, [r3, #0]
w1b = neutralAverage;
 8001772:	2514      	movs	r5, #20
 8001774:	197b      	adds	r3, r7, r5
 8001776:	193a      	adds	r2, r7, r4
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	801a      	strh	r2, [r3, #0]
w2a = (uint16_t)(calFactA * 10000);
 800177c:	4920      	ldr	r1, [pc, #128]	; (8001800 <calibration+0x33c>)
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7fe fe76 	bl	8000470 <__aeabi_fmul>
 8001784:	1c03      	adds	r3, r0, #0
 8001786:	2212      	movs	r2, #18
 8001788:	18bc      	adds	r4, r7, r2
 800178a:	1c18      	adds	r0, r3, #0
 800178c:	f7fe fd46 	bl	800021c <__aeabi_f2uiz>
 8001790:	0003      	movs	r3, r0
 8001792:	8023      	strh	r3, [r4, #0]
w2b = (uint16_t)(calFactB * 10000);
 8001794:	491a      	ldr	r1, [pc, #104]	; (8001800 <calibration+0x33c>)
 8001796:	68b8      	ldr	r0, [r7, #8]
 8001798:	f7fe fe6a 	bl	8000470 <__aeabi_fmul>
 800179c:	1c03      	adds	r3, r0, #0
 800179e:	2110      	movs	r1, #16
 80017a0:	187c      	adds	r4, r7, r1
 80017a2:	1c18      	adds	r0, r3, #0
 80017a4:	f7fe fd3a 	bl	800021c <__aeabi_f2uiz>
 80017a8:	0003      	movs	r3, r0
 80017aa:	8023      	strh	r3, [r4, #0]
w1 = ((uint32_t)w1a << 16) + w1b;
 80017ac:	19bb      	adds	r3, r7, r6
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	61fb      	str	r3, [r7, #28]
w2 = ((uint32_t)w2a << 16) + w2b;
 80017ba:	2212      	movs	r2, #18
 80017bc:	18bb      	adds	r3, r7, r2
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	2110      	movs	r1, #16
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	61bb      	str	r3, [r7, #24]
writeToFlash(w1, w2, calFlashSlot);
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 f8ed 	bl	80019b4 <writeToFlash>
drawInf();
 80017da:	f000 f887 	bl	80018ec <drawInf>
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b011      	add	sp, #68	; 0x44
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	00001388 	.word	0x00001388
 80017ec:	0000063f 	.word	0x0000063f
 80017f0:	000005dc 	.word	0x000005dc
 80017f4:	000009c3 	.word	0x000009c3
 80017f8:	00098967 	.word	0x00098967
 80017fc:	44ffe000 	.word	0x44ffe000
 8001800:	461c4000 	.word	0x461c4000

08001804 <draw5>:

void draw5(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0; j<5; j++){
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e062      	b.n	80018d8 <draw5+0xd4>
		for (i=0; i<40; i++){
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e00c      	b.n	8001834 <draw5+0x30>
			rotateRight(GPIOA_ODR);
 800181a:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <draw5+0xe4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f9c0 	bl	8001ba4 <rotateRight>
			HAL_Delay(1);
 8001824:	2001      	movs	r0, #1
 8001826:	f000 fb35 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	3201      	adds	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b27      	cmp	r3, #39	; 0x27
 800183a:	d9ee      	bls.n	800181a <draw5+0x16>
		}
		HAL_Delay(500);
 800183c:	23fa      	movs	r3, #250	; 0xfa
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fb27 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e00c      	b.n	8001868 <draw5+0x64>
			rotateLeft(GPIOA_ODR);
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <draw5+0xe4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f972 	bl	8001b3c <rotateLeft>
			HAL_Delay(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f000 fb1b 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	3201      	adds	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b27      	cmp	r3, #39	; 0x27
 800186e:	d9ee      	bls.n	800184e <draw5+0x4a>
		}
		for (i=0; i<40; i++){
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e00c      	b.n	8001892 <draw5+0x8e>
			rotateLeft(GPIOA_ODR);
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <draw5+0xe4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f000 f95d 	bl	8001b3c <rotateLeft>
			HAL_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 fb06 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	3201      	adds	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b27      	cmp	r3, #39	; 0x27
 8001898:	d9ee      	bls.n	8001878 <draw5+0x74>
		}
		HAL_Delay(500);
 800189a:	23fa      	movs	r3, #250	; 0xfa
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 faf8 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e00c      	b.n	80018c6 <draw5+0xc2>
			rotateRight(GPIOA_ODR);
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <draw5+0xe4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 f977 	bl	8001ba4 <rotateRight>
			HAL_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 faec 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	1dfb      	adds	r3, r7, #7
 80018c2:	3201      	adds	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b27      	cmp	r3, #39	; 0x27
 80018cc:	d9ee      	bls.n	80018ac <draw5+0xa8>
	for (j=0; j<5; j++){
 80018ce:	1dbb      	adds	r3, r7, #6
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	1dbb      	adds	r3, r7, #6
 80018d4:	3201      	adds	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	1dbb      	adds	r3, r7, #6
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d998      	bls.n	8001812 <draw5+0xe>
		}
	}
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000010 	.word	0x20000010

080018ec <drawInf>:

void drawInf(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	uint8_t i;
	while(1){
		for (i=0; i<40; i++){
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e00c      	b.n	8001914 <drawInf+0x28>
			rotateRight(GPIOA_ODR);
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <drawInf+0xc4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 f950 	bl	8001ba4 <rotateRight>
			HAL_Delay(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f000 fac5 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	3201      	adds	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b27      	cmp	r3, #39	; 0x27
 800191a:	d9ee      	bls.n	80018fa <drawInf+0xe>
		}
		HAL_Delay(500);
 800191c:	23fa      	movs	r3, #250	; 0xfa
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	0018      	movs	r0, r3
 8001922:	f000 fab7 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e00c      	b.n	8001948 <drawInf+0x5c>
			rotateLeft(GPIOA_ODR);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <drawInf+0xc4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f902 	bl	8001b3c <rotateLeft>
			HAL_Delay(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f000 faab 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	3201      	adds	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b27      	cmp	r3, #39	; 0x27
 800194e:	d9ee      	bls.n	800192e <drawInf+0x42>
		}
		for (i=0; i<40; i++){
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e00c      	b.n	8001972 <drawInf+0x86>
			rotateLeft(GPIOA_ODR);
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <drawInf+0xc4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 f8ed 	bl	8001b3c <rotateLeft>
			HAL_Delay(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f000 fa96 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	3201      	adds	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b27      	cmp	r3, #39	; 0x27
 8001978:	d9ee      	bls.n	8001958 <drawInf+0x6c>
		}
		HAL_Delay(500);
 800197a:	23fa      	movs	r3, #250	; 0xfa
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fa88 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e00c      	b.n	80019a6 <drawInf+0xba>
			rotateRight(GPIOA_ODR);
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <drawInf+0xc4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0018      	movs	r0, r3
 8001992:	f000 f907 	bl	8001ba4 <rotateRight>
			HAL_Delay(1);
 8001996:	2001      	movs	r0, #1
 8001998:	f000 fa7c 	bl	8001e94 <HAL_Delay>
		for (i=0; i<40; i++){
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	3201      	adds	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b27      	cmp	r3, #39	; 0x27
 80019ac:	d9ee      	bls.n	800198c <drawInf+0xa0>
		for (i=0; i<40; i++){
 80019ae:	e7a0      	b.n	80018f2 <drawInf+0x6>
 80019b0:	20000010 	.word	0x20000010

080019b4 <writeToFlash>:
		}
	}
}

void writeToFlash(uint32_t w1, uint32_t w2, uint8_t calFlashSlot){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Unlock();
 80019c2:	f001 fd17 	bl	80033f4 <HAL_FLASH_Unlock>
	while (*FLASH_SR&(1<<16));          			//wait for BSY1 flag to be 0
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <writeToFlash+0xb8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f8      	bne.n	80019c8 <writeToFlash+0x14>
	*FLASH_SR = *FLASH_SR & 0x00050000; 			//reset all flash error flags
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <writeToFlash+0xb8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <writeToFlash+0xb8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	22a0      	movs	r2, #160	; 0xa0
 80019e2:	02d2      	lsls	r2, r2, #11
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
	while (*FLASH_SR&(1<<18));          			//wait for CFGBSY1 flag to be 0
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <writeToFlash+0xb8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	02db      	lsls	r3, r3, #11
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1f8      	bne.n	80019ea <writeToFlash+0x36>
	*FLASH_CR = *FLASH_CR | 0x01; 					//set PG flag
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <writeToFlash+0xbc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <writeToFlash+0xbc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
	*(PAGE15_SLOT1 + (calFlashSlot*2)) = w1;    	//write w1 into Flash
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <writeToFlash+0xc0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	1dfa      	adds	r2, r7, #7
 8001a0e:	7812      	ldrb	r2, [r2, #0]
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	189b      	adds	r3, r3, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001a18:	f3bf 8f6f 	isb	sy
	__ISB();										//Ensures that the two 32bit words are not merged by compiler
	*(PAGE15_SLOT1 + (calFlashSlot*2) + 1) = w2;    //write w2 into Flash
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <writeToFlash+0xc0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	3304      	adds	r3, #4
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	601a      	str	r2, [r3, #0]
	while (*FLASH_SR&(1<<16));          			//wait for BSY1 flag to be 0
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <writeToFlash+0xb8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	025b      	lsls	r3, r3, #9
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1f8      	bne.n	8001a30 <writeToFlash+0x7c>
	while (*FLASH_SR&(1<<18));          			//wait for CFGBSY1 flag to be 0
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <writeToFlash+0xb8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	02db      	lsls	r3, r3, #11
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f8      	bne.n	8001a40 <writeToFlash+0x8c>
	*FLASH_CR = *FLASH_CR & 0xFFFFFFFE;				//reset PG flag
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <writeToFlash+0xbc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <writeToFlash+0xbc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	438a      	bics	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Lock();
 8001a5e:	f001 fced 	bl	800343c <HAL_FLASH_Lock>
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004
 8001a74:	20000008 	.word	0x20000008

08001a78 <eraseFlash>:

void eraseFlash (void){								//Erase pages 30 and 31 in flash memory function
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

	//__HAL_LOCK(&pFlash); 							//Lock process
	HAL_FLASH_Unlock();
 8001a7c:	f001 fcba 	bl	80033f4 <HAL_FLASH_Unlock>
	while (*FLASH_SR&(1<<16));          			//wait for BSY1 flag to be 0
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <eraseFlash+0x88>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d1f8      	bne.n	8001a82 <eraseFlash+0xa>
	*FLASH_SR = *FLASH_SR & 0x00050000; 			//reset all flash error flags
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <eraseFlash+0x88>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <eraseFlash+0x88>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	22a0      	movs	r2, #160	; 0xa0
 8001a9c:	02d2      	lsls	r2, r2, #11
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
	*FLASH_CR = *FLASH_CR & 0xC0000000; 			//reset page erase and number flags
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <eraseFlash+0x8c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <eraseFlash+0x8c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0f92      	lsrs	r2, r2, #30
 8001aae:	0792      	lsls	r2, r2, #30
 8001ab0:	601a      	str	r2, [r3, #0]
	*FLASH_CR = *FLASH_CR | 0x7A; 					//set page erase flag and page number 15
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <eraseFlash+0x8c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <eraseFlash+0x8c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	217a      	movs	r1, #122	; 0x7a
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
	*FLASH_CR = *FLASH_CR | (1<<16);    			//set start flag
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <eraseFlash+0x8c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <eraseFlash+0x8c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0249      	lsls	r1, r1, #9
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
	while (*FLASH_SR&(1<<16));          			//wait for BSY1 flag to be 0
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <eraseFlash+0x88>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d1f8      	bne.n	8001ad6 <eraseFlash+0x5e>
	*FLASH_CR = *FLASH_CR & 0xC0000000; 			//reset page erase and number flags
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <eraseFlash+0x8c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <eraseFlash+0x8c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0f92      	lsrs	r2, r2, #30
 8001af0:	0792      	lsls	r2, r2, #30
 8001af2:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Lock();
 8001af4:	f001 fca2 	bl	800343c <HAL_FLASH_Lock>
	//__HAL_UNLOCK(&pFlash);
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <getValue>:

uint16_t getValue(void){							//Reads one value from ADC
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

	uint16_t value;
	while (!(*ADC_ISR & 1<<3));						//Wait till new value is available from ADC data register
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <getValue+0x2c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2208      	movs	r2, #8
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0f9      	beq.n	8001b10 <getValue+0x8>
	value = (uint16_t)(*ADC_DR);
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <getValue+0x30>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	1dbb      	adds	r3, r7, #6
 8001b24:	801a      	strh	r2, [r3, #0]
	return value;
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	881b      	ldrh	r3, [r3, #0]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	20000014 	.word	0x20000014
 8001b38:	20000018 	.word	0x20000018

08001b3c <rotateLeft>:

void rotateLeft (volatile uint32_t* GPIOA_ODR){		//Simulate an optical disc rotation (LEFT)
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	uint8_t result, data;
	data = (uint8_t)(*(GPIOA_ODR)>>8);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0a1a      	lsrs	r2, r3, #8
 8001b4a:	210e      	movs	r1, #14
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
	if ( data & 1<<7 ){
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da0b      	bge.n	8001b72 <rotateLeft+0x36>
		result = (data<<1)|(1<<0);
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	2201      	movs	r2, #1
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b25a      	sxtb	r2, r3
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	e006      	b.n	8001b80 <rotateLeft+0x44>
	}else{
		result = (data<<1);
 8001b72:	230f      	movs	r3, #15
 8001b74:	18fa      	adds	r2, r7, r3
 8001b76:	230e      	movs	r3, #14
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	18db      	adds	r3, r3, r3
 8001b7e:	7013      	strb	r3, [r2, #0]
	}
	*GPIOA_ODR = (*GPIOA_ODR & 0xFFFF00FF) + ((uint16_t)result << 8);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <rotateLeft+0x64>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	18ba      	adds	r2, r7, r2
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	0212      	lsls	r2, r2, #8
 8001b90:	189a      	adds	r2, r3, r2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b004      	add	sp, #16
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	ffff00ff 	.word	0xffff00ff

08001ba4 <rotateRight>:

void rotateRight (volatile uint32_t* GPIOA_ODR){		//Simulate an optical disc rotation (RIGHT)
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	uint8_t result, data;
	data = (uint8_t)(*(GPIOA_ODR)>>8);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0a1a      	lsrs	r2, r3, #8
 8001bb2:	210e      	movs	r1, #14
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	701a      	strb	r2, [r3, #0]
	if ( data & (1<<0) ){
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d00b      	beq.n	8001bda <rotateRight+0x36>
		result = (data>>1)|(1<<7);
 8001bc2:	230e      	movs	r3, #14
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	230f      	movs	r3, #15
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	4249      	negs	r1, r1
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e006      	b.n	8001be8 <rotateRight+0x44>
	}else{
		result = (data>>1);
 8001bda:	230f      	movs	r3, #15
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	220e      	movs	r2, #14
 8001be0:	18ba      	adds	r2, r7, r2
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	0852      	lsrs	r2, r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
	}
	*GPIOA_ODR = (*GPIOA_ODR & 0xFFFF00FF) + ((uint16_t)result << 8);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <rotateRight+0x64>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	18ba      	adds	r2, r7, r2
 8001bf4:	7812      	ldrb	r2, [r2, #0]
 8001bf6:	0212      	lsls	r2, r2, #8
 8001bf8:	189a      	adds	r2, r3, r2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	ffff00ff 	.word	0xffff00ff

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_MspInit+0x44>)
 8001c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_MspInit+0x44>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_MspInit+0x44>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_MspInit+0x44>)
 8001c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_MspInit+0x44>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_MspInit+0x44>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	055b      	lsls	r3, r3, #21
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	2314      	movs	r3, #20
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2314      	movs	r3, #20
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f002 fc08 	bl	8004488 <memset>
  if(hadc->Instance==ADC1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_ADC_MspInit+0x80>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d129      	bne.n	8001cd6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0x84>)
 8001c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_ADC_MspInit+0x84>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	0349      	lsls	r1, r1, #13
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_ADC_MspInit+0x84>)
 8001c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	035b      	lsls	r3, r3, #13
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_ADC_MspInit+0x84>)
 8001ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_MspInit+0x84>)
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_ADC_MspInit+0x84>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB7     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = AXIS_IN_Pin;
 8001cb6:	2114      	movs	r1, #20
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AXIS_IN_GPIO_Port, &GPIO_InitStruct);
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_ADC_MspInit+0x88>)
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f001 fbcf 	bl	8003474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b00a      	add	sp, #40	; 0x28
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40012400 	.word	0x40012400
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	50000400 	.word	0x50000400

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d14:	f000 f8a4 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <SystemInit+0x14>)
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	0512      	lsls	r2, r2, #20
 8001d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d3e:	e003      	b.n	8001d48 <LoopCopyDataInit>

08001d40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001d42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d46:	3104      	adds	r1, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <LoopForever+0xa>)
  ldr r3, =_edata
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <LoopForever+0xe>)
  adds r2, r0, r1
 8001d4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d50:	d3f6      	bcc.n	8001d40 <CopyDataInit>
  ldr r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopForever+0x12>)
  b LoopFillZerobss
 8001d54:	e002      	b.n	8001d5c <LoopFillZerobss>

08001d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  str  r3, [r2]
 8001d58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5a:	3204      	adds	r2, #4

08001d5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <LoopForever+0x16>)
  cmp r2, r3
 8001d5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d60:	d3f9      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d62:	f7ff ffdd 	bl	8001d20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d66:	f002 fb6b 	bl	8004440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7ff f83f 	bl	8000dec <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   r0, =_estack
 8001d70:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8001d74:	080045b8 	.word	0x080045b8
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d7c:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8001d80:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8001d84:	200000ac 	.word	0x200000ac

08001d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x3c>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Init+0x3c>)
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	0049      	lsls	r1, r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f810 	bl	8001dcc <HAL_InitTick>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e001      	b.n	8001dbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff ff2e 	bl	8001c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40022000 	.word	0x40022000

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_InitTick+0x88>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d02b      	beq.n	8001e3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001de4:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_InitTick+0x8c>)
 8001de6:	681c      	ldr	r4, [r3, #0]
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_InitTick+0x88>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0019      	movs	r1, r3
 8001dee:	23fa      	movs	r3, #250	; 0xfa
 8001df0:	0098      	lsls	r0, r3, #2
 8001df2:	f7fe f987 	bl	8000104 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	f7fe f982 	bl	8000104 <__udivsi3>
 8001e00:	0003      	movs	r3, r0
 8001e02:	0018      	movs	r0, r3
 8001e04:	f001 fae9 	bl	80033da <HAL_SYSTICK_Config>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d112      	bne.n	8001e32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d80a      	bhi.n	8001e28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	2301      	movs	r3, #1
 8001e16:	425b      	negs	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f001 fac8 	bl	80033b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_InitTick+0x90>)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e00d      	b.n	8001e44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e008      	b.n	8001e44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b005      	add	sp, #20
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000024 	.word	0x20000024
 8001e58:	2000001c 	.word	0x2000001c
 8001e5c:	20000020 	.word	0x20000020

08001e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_IncTick+0x18>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_IncTick+0x1c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	18d2      	adds	r2, r2, r3
 8001e6e:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_IncTick+0x18>)
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200000a8 	.word	0x200000a8
 8001e7c:	20000024 	.word	0x20000024

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_GetTick+0x10>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	200000a8 	.word	0x200000a8

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	d004      	beq.n	8001eb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_Delay+0x40>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	f7ff ffe1 	bl	8001e80 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d8f7      	bhi.n	8001eba <HAL_Delay+0x26>
  {
  }
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000024 	.word	0x20000024

08001ed8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001ee8:	401a      	ands	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	fe3fffff 	.word	0xfe3fffff

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	23e0      	movs	r3, #224	; 0xe0
 8001f0e:	045b      	lsls	r3, r3, #17
 8001f10:	4013      	ands	r3, r2
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	400a      	ands	r2, r1
 8001f30:	2107      	movs	r1, #7
 8001f32:	4091      	lsls	r1, r2
 8001f34:	000a      	movs	r2, r1
 8001f36:	43d2      	mvns	r2, r2
 8001f38:	401a      	ands	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4099      	lsls	r1, r3
 8001f44:	000b      	movs	r3, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	211f      	movs	r1, #31
 8001f68:	400a      	ands	r2, r1
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	43d2      	mvns	r2, r2
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	210f      	movs	r1, #15
 8001f7a:	4019      	ands	r1, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	201f      	movs	r0, #31
 8001f80:	4003      	ands	r3, r0
 8001f82:	4099      	lsls	r1, r3
 8001f84:	000b      	movs	r3, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b004      	add	sp, #16
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	035b      	lsls	r3, r3, #13
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	0352      	lsls	r2, r2, #13
 8001fc8:	0b52      	lsrs	r2, r2, #13
 8001fca:	43d2      	mvns	r2, r2
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	0212      	lsls	r2, r2, #8
 8001ff0:	43d2      	mvns	r2, r2
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	4904      	ldr	r1, [pc, #16]	; (8002010 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	07ffff00 	.word	0x07ffff00

08002014 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d103      	bne.n	8002030 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	330c      	adds	r3, #12
 800202c:	001c      	movs	r4, r3
 800202e:	e009      	b.n	8002044 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	33a0      	adds	r3, #160	; 0xa0
 8002034:	0019      	movs	r1, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	2204      	movs	r2, #4
 800203e:	4013      	ands	r3, r2
 8002040:	18cb      	adds	r3, r1, r3
 8002042:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 800204a:	400a      	ands	r2, r1
 800204c:	43d2      	mvns	r2, r2
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	400b      	ands	r3, r1
 8002056:	4313      	orrs	r3, r2
 8002058:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b005      	add	sp, #20
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	7cc00000 	.word	0x7cc00000
 8002068:	7cc7ffff 	.word	0x7cc7ffff

0800206c <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3320      	adds	r3, #32
 800207e:	0018      	movs	r0, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0d1b      	lsrs	r3, r3, #20
 8002084:	2203      	movs	r2, #3
 8002086:	401a      	ands	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	0d5b      	lsrs	r3, r3, #21
 800208c:	2101      	movs	r1, #1
 800208e:	400b      	ands	r3, r1
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	18c3      	adds	r3, r0, r3
 8002096:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 800209c:	401a      	ands	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0419      	lsls	r1, r3, #16
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	4313      	orrs	r3, r2
 80020a8:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b005      	add	sp, #20
 80020b0:	bd90      	pop	{r4, r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	f000f000 	.word	0xf000f000

080020b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a05      	ldr	r2, [pc, #20]	; (80020dc <LL_ADC_EnableInternalRegulator+0x24>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	0552      	lsls	r2, r2, #21
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	6fffffe8 	.word	0x6fffffe8

080020e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	055b      	lsls	r3, r3, #21
 80020f0:	401a      	ands	r2, r3
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	055b      	lsls	r3, r3, #21
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d101      	bne.n	80020fe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <LL_ADC_Enable+0x20>)
 8002116:	4013      	ands	r3, r2
 8002118:	2201      	movs	r2, #1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}
 8002128:	7fffffe8 	.word	0x7fffffe8

0800212c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <LL_ADC_Disable+0x20>)
 800213a:	4013      	ands	r3, r2
 800213c:	2202      	movs	r2, #2
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}
 800214c:	7fffffe8 	.word	0x7fffffe8

08002150 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <LL_ADC_IsEnabled+0x18>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <LL_ADC_IsEnabled+0x1a>
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b002      	add	sp, #8
 8002170:	bd80      	pop	{r7, pc}

08002172 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d101      	bne.n	800218a <LL_ADC_IsDisableOngoing+0x18>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_ADC_IsDisableOngoing+0x1a>
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <LL_ADC_REG_StartConversion+0x20>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	2204      	movs	r2, #4
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	7fffffe8 	.word	0x7fffffe8

080021b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d101      	bne.n	80021d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}

080021da <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	601a      	str	r2, [r3, #0]
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	605a      	str	r2, [r3, #4]
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}

0800225a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b002      	add	sp, #8
 8002276:	bd80      	pop	{r7, pc}

08002278 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	4393      	bics	r3, r2
 8002288:	001a      	movs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	605a      	str	r2, [r3, #4]
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <LL_ADC_DisableIT_AWD2+0x1c>)
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	605a      	str	r2, [r3, #4]
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	fffffeff 	.word	0xfffffeff

080022b8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <LL_ADC_DisableIT_AWD3+0x1c>)
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	605a      	str	r2, [r3, #4]
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	fffffdff 	.word	0xfffffdff

080022d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	231f      	movs	r3, #31
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e1aa      	b.n	8002654 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10a      	bne.n	800231c <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff fca9 	bl	8001c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2254      	movs	r2, #84	; 0x54
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff fedd 	bl	80020e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d114      	bne.n	8002354 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff fec2 	bl	80020b8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002334:	4bc9      	ldr	r3, [pc, #804]	; (800265c <HAL_ADC_Init+0x384>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	49c9      	ldr	r1, [pc, #804]	; (8002660 <HAL_ADC_Init+0x388>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd fee2 	bl	8000104 <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8002346:	e002      	b.n	800234e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	3b01      	subs	r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f9      	bne.n	8002348 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff fec1 	bl	80020e0 <LL_ADC_IsInternalRegulatorEnabled>
 800235e:	1e03      	subs	r3, r0, #0
 8002360:	d10f      	bne.n	8002382 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	2210      	movs	r2, #16
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	2201      	movs	r2, #1
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800237a:	231f      	movs	r3, #31
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ff16 	bl	80021b8 <LL_ADC_REG_IsConversionOngoing>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	2210      	movs	r2, #16
 8002396:	4013      	ands	r3, r2
 8002398:	d000      	beq.n	800239c <HAL_ADC_Init+0xc4>
 800239a:	e14e      	b.n	800263a <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d000      	beq.n	80023a4 <HAL_ADC_Init+0xcc>
 80023a2:	e14a      	b.n	800263a <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4aae      	ldr	r2, [pc, #696]	; (8002664 <HAL_ADC_Init+0x38c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	2202      	movs	r2, #2
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7ff fec9 	bl	8002150 <LL_ADC_IsEnabled>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d137      	bne.n	8002432 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2218      	movs	r2, #24
 80023ca:	4393      	bics	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	0899      	lsrs	r1, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0f9b      	lsrs	r3, r3, #30
 80023ea:	079a      	lsls	r2, r3, #30
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	23c0      	movs	r3, #192	; 0xc0
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d018      	beq.n	8002432 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	05db      	lsls	r3, r3, #23
 8002408:	429a      	cmp	r2, r3
 800240a:	d012      	beq.n	8002432 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	061b      	lsls	r3, r3, #24
 8002414:	429a      	cmp	r2, r3
 8002416:	d00c      	beq.n	8002432 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002418:	4b93      	ldr	r3, [pc, #588]	; (8002668 <HAL_ADC_Init+0x390>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a93      	ldr	r2, [pc, #588]	; (800266c <HAL_ADC_Init+0x394>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	23f0      	movs	r3, #240	; 0xf0
 8002428:	039b      	lsls	r3, r3, #14
 800242a:	401a      	ands	r2, r3
 800242c:	4b8e      	ldr	r3, [pc, #568]	; (8002668 <HAL_ADC_Init+0x390>)
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7e1b      	ldrb	r3, [r3, #24]
 8002436:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7e5b      	ldrb	r3, [r3, #25]
 800243c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800243e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e9b      	ldrb	r3, [r3, #26]
 8002444:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002446:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_ADC_Init+0x17e>
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	e000      	b.n	8002458 <HAL_ADC_Init+0x180>
 8002456:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002458:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800245e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da04      	bge.n	8002472 <HAL_ADC_Init+0x19a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	e001      	b.n	8002476 <HAL_ADC_Init+0x19e>
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8002476:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	5c5b      	ldrb	r3, [r3, r1]
 800247e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002480:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d115      	bne.n	80024be <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7e9b      	ldrb	r3, [r3, #26]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	0252      	lsls	r2, r2, #9
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	e00b      	b.n	80024be <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	2220      	movs	r2, #32
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2201      	movs	r2, #1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ca:	23e0      	movs	r3, #224	; 0xe0
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80024e4:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 80024ea:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 80024f0:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	223c      	movs	r2, #60	; 0x3c
 80024fc:	5c9b      	ldrb	r3, [r3, r2]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d103      	bne.n	800250a <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2201      	movs	r2, #1
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_ADC_Init+0x398>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4a53      	ldr	r2, [pc, #332]	; (8002674 <HAL_ADC_Init+0x39c>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	430a      	orrs	r2, r1
 8002534:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f7ff fcea 	bl	8001f1a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	494a      	ldr	r1, [pc, #296]	; (8002678 <HAL_ADC_Init+0x3a0>)
 8002550:	001a      	movs	r2, r3
 8002552:	f7ff fce2 	bl	8001f1a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2110      	movs	r1, #16
 800256a:	4249      	negs	r1, r1
 800256c:	430a      	orrs	r2, r1
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
 8002570:	e03c      	b.n	80025ec <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	039b      	lsls	r3, r3, #14
 800257a:	429a      	cmp	r2, r3
 800257c:	d136      	bne.n	80025ec <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e00c      	b.n	800259e <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	40da      	lsrs	r2, r3
 800258e:	0013      	movs	r3, r2
 8002590:	220f      	movs	r2, #15
 8002592:	4013      	ands	r3, r2
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d006      	beq.n	80025a6 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	3301      	adds	r3, #1
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b07      	cmp	r3, #7
 80025a2:	d9ef      	bls.n	8002584 <HAL_ADC_Init+0x2ac>
 80025a4:	e000      	b.n	80025a8 <HAL_ADC_Init+0x2d0>
        {
          break;
 80025a6:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d109      	bne.n	80025c2 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2110      	movs	r1, #16
 80025ba:	4249      	negs	r1, r1
 80025bc:	430a      	orrs	r2, r1
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
 80025c0:	e014      	b.n	80025ec <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_ADC_Init+0x3a4>)
 80025ce:	4694      	mov	ip, r2
 80025d0:	4463      	add	r3, ip
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	221c      	movs	r2, #28
 80025d6:	4013      	ands	r3, r2
 80025d8:	2210      	movs	r2, #16
 80025da:	4252      	negs	r2, r2
 80025dc:	409a      	lsls	r2, r3
 80025de:	0011      	movs	r1, r2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_ADC_Init+0x3a8>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10b      	bne.n	8002614 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	2203      	movs	r2, #3
 8002608:	4393      	bics	r3, r2
 800260a:	2201      	movs	r2, #1
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002612:	e01c      	b.n	800264e <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	2212      	movs	r2, #18
 800261a:	4393      	bics	r3, r2
 800261c:	2210      	movs	r2, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	2201      	movs	r2, #1
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8002630:	231f      	movs	r3, #31
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002638:	e009      	b.n	800264e <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	2210      	movs	r2, #16
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800264e:	231f      	movs	r3, #31
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b008      	add	sp, #32
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000001c 	.word	0x2000001c
 8002660:	00030d40 	.word	0x00030d40
 8002664:	fffffefd 	.word	0xfffffefd
 8002668:	40012708 	.word	0x40012708
 800266c:	ffc3ffff 	.word	0xffc3ffff
 8002670:	fffe0219 	.word	0xfffe0219
 8002674:	dffffc02 	.word	0xdffffc02
 8002678:	07ffff04 	.word	0x07ffff04
 800267c:	3fffffff 	.word	0x3fffffff
 8002680:	833fffe7 	.word	0x833fffe7

08002684 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff fd91 	bl	80021b8 <LL_ADC_REG_IsConversionOngoing>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d135      	bne.n	8002706 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2254      	movs	r2, #84	; 0x54
 800269e:	5c9b      	ldrb	r3, [r3, r2]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_Start+0x24>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e035      	b.n	8002714 <HAL_ADC_Start+0x90>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2254      	movs	r2, #84	; 0x54
 80026ac:	2101      	movs	r1, #1
 80026ae:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026b0:	250f      	movs	r5, #15
 80026b2:	197c      	adds	r4, r7, r5
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 fc8e 	bl	8002fd8 <ADC_Enable>
 80026bc:	0003      	movs	r3, r0
 80026be:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026c0:	197b      	adds	r3, r7, r5
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d119      	bne.n	80026fc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_ADC_Start+0x98>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	0052      	lsls	r2, r2, #1
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	221c      	movs	r2, #28
 80026e6:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2254      	movs	r2, #84	; 0x54
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff fd4d 	bl	8002194 <LL_ADC_REG_StartConversion>
 80026fa:	e008      	b.n	800270e <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2254      	movs	r2, #84	; 0x54
 8002700:	2100      	movs	r1, #0
 8002702:	5499      	strb	r1, [r3, r2]
 8002704:	e003      	b.n	800270e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800270e:	230f      	movs	r3, #15
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	fffff0fe 	.word	0xfffff0fe

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272a:	2317      	movs	r3, #23
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2254      	movs	r2, #84	; 0x54
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x24>
 8002740:	2302      	movs	r3, #2
 8002742:	e1bc      	b.n	8002abe <HAL_ADC_ConfigChannel+0x39e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2254      	movs	r2, #84	; 0x54
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fd31 	bl	80021b8 <LL_ADC_REG_IsConversionOngoing>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d000      	beq.n	800275c <HAL_ADC_ConfigChannel+0x3c>
 800275a:	e19f      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d100      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x46>
 8002764:	e13e      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	429a      	cmp	r2, r3
 8002770:	d004      	beq.n	800277c <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002776:	4abf      	ldr	r2, [pc, #764]	; (8002a74 <HAL_ADC_ConfigChannel+0x354>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0019      	movs	r1, r3
 8002786:	0010      	movs	r0, r2
 8002788:	f7ff fc04 	bl	8001f94 <LL_ADC_REG_SetSequencerChAdd>
 800278c:	e0c9      	b.n	8002922 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	211f      	movs	r1, #31
 8002798:	400b      	ands	r3, r1
 800279a:	210f      	movs	r1, #15
 800279c:	4099      	lsls	r1, r3
 800279e:	000b      	movs	r3, r1
 80027a0:	43db      	mvns	r3, r3
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	035b      	lsls	r3, r3, #13
 80027ac:	0b5b      	lsrs	r3, r3, #13
 80027ae:	d105      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x9c>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	221f      	movs	r2, #31
 80027b8:	4013      	ands	r3, r2
 80027ba:	e098      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	d000      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0xa8>
 80027c6:	e091      	b.n	80028ec <HAL_ADC_ConfigChannel+0x1cc>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d000      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0xb4>
 80027d2:	e089      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1c8>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2204      	movs	r2, #4
 80027da:	4013      	ands	r3, r2
 80027dc:	d000      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0xc0>
 80027de:	e081      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1c4>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2208      	movs	r2, #8
 80027e6:	4013      	ands	r3, r2
 80027e8:	d000      	beq.n	80027ec <HAL_ADC_ConfigChannel+0xcc>
 80027ea:	e079      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x1c0>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	4013      	ands	r3, r2
 80027f4:	d000      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0xd8>
 80027f6:	e071      	b.n	80028dc <HAL_ADC_ConfigChannel+0x1bc>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2220      	movs	r2, #32
 80027fe:	4013      	ands	r3, r2
 8002800:	d000      	beq.n	8002804 <HAL_ADC_ConfigChannel+0xe4>
 8002802:	e069      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x1b8>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	4013      	ands	r3, r2
 800280c:	d000      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xf0>
 800280e:	e061      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x1b4>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	4013      	ands	r3, r2
 8002818:	d000      	beq.n	800281c <HAL_ADC_ConfigChannel+0xfc>
 800281a:	e059      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1b0>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4013      	ands	r3, r2
 8002826:	d151      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1ac>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d149      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1a8>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4013      	ands	r3, r2
 800283e:	d141      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1a4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4013      	ands	r3, r2
 800284a:	d139      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1a0>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	015b      	lsls	r3, r3, #5
 8002854:	4013      	ands	r3, r2
 8002856:	d131      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x19c>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	019b      	lsls	r3, r3, #6
 8002860:	4013      	ands	r3, r2
 8002862:	d129      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x198>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	01db      	lsls	r3, r3, #7
 800286c:	4013      	ands	r3, r2
 800286e:	d121      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x194>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	4013      	ands	r3, r2
 800287a:	d119      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x190>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	025b      	lsls	r3, r3, #9
 8002884:	4013      	ands	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x18c>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	4013      	ands	r3, r2
 8002892:	d109      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x188>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	02db      	lsls	r3, r3, #11
 800289c:	4013      	ands	r3, r2
 800289e:	d001      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x184>
 80028a0:	2312      	movs	r3, #18
 80028a2:	e024      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028a4:	2300      	movs	r3, #0
 80028a6:	e022      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028a8:	2311      	movs	r3, #17
 80028aa:	e020      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028ac:	2310      	movs	r3, #16
 80028ae:	e01e      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028b0:	230f      	movs	r3, #15
 80028b2:	e01c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028b4:	230e      	movs	r3, #14
 80028b6:	e01a      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028b8:	230d      	movs	r3, #13
 80028ba:	e018      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028bc:	230c      	movs	r3, #12
 80028be:	e016      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028c0:	230b      	movs	r3, #11
 80028c2:	e014      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028c4:	230a      	movs	r3, #10
 80028c6:	e012      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028c8:	2309      	movs	r3, #9
 80028ca:	e010      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028cc:	2308      	movs	r3, #8
 80028ce:	e00e      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028d0:	2307      	movs	r3, #7
 80028d2:	e00c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028d4:	2306      	movs	r3, #6
 80028d6:	e00a      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028d8:	2305      	movs	r3, #5
 80028da:	e008      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028dc:	2304      	movs	r3, #4
 80028de:	e006      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e004      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e002      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ce>
 80028ec:	2300      	movs	r3, #0
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6852      	ldr	r2, [r2, #4]
 80028f2:	201f      	movs	r0, #31
 80028f4:	4002      	ands	r2, r0
 80028f6:	4093      	lsls	r3, r2
 80028f8:	000a      	movs	r2, r1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d808      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	001a      	movs	r2, r3
 800291e:	f7ff fb19 	bl	8001f54 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	001a      	movs	r2, r3
 8002930:	f7ff fb54 	bl	8001fdc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db00      	blt.n	800293e <HAL_ADC_ConfigChannel+0x21e>
 800293c:	e0b8      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff fadd 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002946:	0003      	movs	r3, r0
 8002948:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <HAL_ADC_ConfigChannel+0x35c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d11d      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x270>
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d118      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	0412      	lsls	r2, r2, #16
 8002964:	4313      	orrs	r3, r2
 8002966:	4a44      	ldr	r2, [pc, #272]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 8002968:	0019      	movs	r1, r3
 800296a:	0010      	movs	r0, r2
 800296c:	f7ff fab4 	bl	8001ed8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_ADC_ConfigChannel+0x360>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4943      	ldr	r1, [pc, #268]	; (8002a84 <HAL_ADC_ConfigChannel+0x364>)
 8002976:	0018      	movs	r0, r3
 8002978:	f7fd fbc4 	bl	8000104 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8002980:	e002      	b.n	8002988 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b01      	subs	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800298e:	e08f      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_ADC_ConfigChannel+0x368>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10e      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x298>
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	045b      	lsls	r3, r3, #17
 80029a0:	4013      	ands	r3, r2
 80029a2:	d109      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	0452      	lsls	r2, r2, #17
 80029aa:	4313      	orrs	r3, r2
 80029ac:	4a32      	ldr	r2, [pc, #200]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f7ff fa91 	bl	8001ed8 <LL_ADC_SetCommonPathInternalCh>
 80029b6:	e07b      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a33      	ldr	r2, [pc, #204]	; (8002a8c <HAL_ADC_ConfigChannel+0x36c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d000      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x2a4>
 80029c2:	e075      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	03db      	lsls	r3, r3, #15
 80029ca:	4013      	ands	r3, r2
 80029cc:	d000      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x2b0>
 80029ce:	e06f      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	03d2      	lsls	r2, r2, #15
 80029d6:	4313      	orrs	r3, r2
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 80029da:	0019      	movs	r1, r3
 80029dc:	0010      	movs	r0, r2
 80029de:	f7ff fa7b 	bl	8001ed8 <LL_ADC_SetCommonPathInternalCh>
 80029e2:	e065      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	061b      	lsls	r3, r3, #24
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_ADC_ConfigChannel+0x354>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d107      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0019      	movs	r1, r3
 8002a04:	0010      	movs	r0, r2
 8002a06:	f7ff fad6 	bl	8001fb6 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da4e      	bge.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff fa73 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_ADC_ConfigChannel+0x35c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_ADC_ConfigChannel+0x370>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 8002a30:	0019      	movs	r1, r3
 8002a32:	0010      	movs	r0, r2
 8002a34:	f7ff fa50 	bl	8001ed8 <LL_ADC_SetCommonPathInternalCh>
 8002a38:	e03a      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <HAL_ADC_ConfigChannel+0x368>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d108      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_ADC_ConfigChannel+0x374>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	0010      	movs	r0, r2
 8002a50:	f7ff fa42 	bl	8001ed8 <LL_ADC_SetCommonPathInternalCh>
 8002a54:	e02c      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_ADC_ConfigChannel+0x36c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d127      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_ADC_ConfigChannel+0x378>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_ADC_ConfigChannel+0x358>)
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f7ff fa34 	bl	8001ed8 <LL_ADC_SetCommonPathInternalCh>
 8002a70:	e01e      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x390>
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	80000004 	.word	0x80000004
 8002a78:	40012708 	.word	0x40012708
 8002a7c:	b0001000 	.word	0xb0001000
 8002a80:	2000001c 	.word	0x2000001c
 8002a84:	00030d40 	.word	0x00030d40
 8002a88:	b8004000 	.word	0xb8004000
 8002a8c:	b4002000 	.word	0xb4002000
 8002a90:	ff7fffff 	.word	0xff7fffff
 8002a94:	feffffff 	.word	0xfeffffff
 8002a98:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8002aa8:	2317      	movs	r3, #23
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2254      	movs	r2, #84	; 0x54
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002ab8:	2317      	movs	r3, #23
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)

08002ac8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2254      	movs	r2, #84	; 0x54
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_AnalogWDGConfig+0x20>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e269      	b.n	8002fbc <HAL_ADC_AnalogWDGConfig+0x4f4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2254      	movs	r2, #84	; 0x54
 8002aec:	2101      	movs	r1, #1
 8002aee:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff fb5f 	bl	80021b8 <LL_ADC_REG_IsConversionOngoing>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d000      	beq.n	8002b00 <HAL_ADC_AnalogWDGConfig+0x38>
 8002afe:	e22a      	b.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a93      	ldr	r2, [pc, #588]	; (8002d54 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d142      	bne.n	8002b90 <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	0412      	lsls	r2, r2, #16
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d011      	beq.n	8002b3a <HAL_ADC_AnalogWDGConfig+0x72>
 8002b16:	22c0      	movs	r2, #192	; 0xc0
 8002b18:	0412      	lsls	r2, r2, #16
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d115      	bne.n	8002b4a <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4a8c      	ldr	r2, [pc, #560]	; (8002d58 <HAL_ADC_AnalogWDGConfig+0x290>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	22c0      	movs	r2, #192	; 0xc0
 8002b2c:	0412      	lsls	r2, r2, #16
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	4988      	ldr	r1, [pc, #544]	; (8002d54 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8002b32:	001a      	movs	r2, r3
 8002b34:	f7ff fa6e 	bl	8002014 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b38:	e00f      	b.n	8002b5a <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_ADC_AnalogWDGConfig+0x294>)
 8002b40:	4984      	ldr	r1, [pc, #528]	; (8002d54 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fa66 	bl	8002014 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b48:	e007      	b.n	8002b5a <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4981      	ldr	r1, [pc, #516]	; (8002d54 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7ff fa5e 	bl	8002014 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b58:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a80      	ldr	r2, [pc, #512]	; (8002d60 <HAL_ADC_AnalogWDGConfig+0x298>)
 8002b60:	401a      	ands	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7ff fb35 	bl	80021da <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	7b1b      	ldrb	r3, [r3, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff fb4f 	bl	8002220 <LL_ADC_EnableIT_AWD1>
 8002b82:	e1e8      	b.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff fb75 	bl	8002278 <LL_ADC_DisableIT_AWD1>
 8002b8e:	e1e2      	b.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	0412      	lsls	r2, r2, #16
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <HAL_ADC_AnalogWDGConfig+0xd6>
 8002b9c:	e18f      	b.n	8002ebe <HAL_ADC_AnalogWDGConfig+0x3f6>
 8002b9e:	22c0      	movs	r2, #192	; 0xc0
 8002ba0:	0412      	lsls	r2, r2, #16
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d000      	beq.n	8002ba8 <HAL_ADC_AnalogWDGConfig+0xe0>
 8002ba6:	e193      	b.n	8002ed0 <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6d      	ldr	r2, [pc, #436]	; (8002d64 <HAL_ADC_AnalogWDGConfig+0x29c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d000      	beq.n	8002bb4 <HAL_ADC_AnalogWDGConfig+0xec>
 8002bb2:	e0bc      	b.n	8002d2e <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	22a0      	movs	r2, #160	; 0xa0
 8002bba:	5899      	ldr	r1, [r3, r2]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	035b      	lsls	r3, r3, #13
 8002bc2:	0b5b      	lsrs	r3, r3, #13
 8002bc4:	d108      	bne.n	8002bd8 <HAL_ADC_AnalogWDGConfig+0x110>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	221f      	movs	r2, #31
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	e0a4      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	d000      	beq.n	8002be4 <HAL_ADC_AnalogWDGConfig+0x11c>
 8002be2:	e09d      	b.n	8002d20 <HAL_ADC_AnalogWDGConfig+0x258>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d000      	beq.n	8002bf0 <HAL_ADC_AnalogWDGConfig+0x128>
 8002bee:	e095      	b.n	8002d1c <HAL_ADC_AnalogWDGConfig+0x254>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d000      	beq.n	8002bfc <HAL_ADC_AnalogWDGConfig+0x134>
 8002bfa:	e08d      	b.n	8002d18 <HAL_ADC_AnalogWDGConfig+0x250>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2208      	movs	r2, #8
 8002c02:	4013      	ands	r3, r2
 8002c04:	d000      	beq.n	8002c08 <HAL_ADC_AnalogWDGConfig+0x140>
 8002c06:	e085      	b.n	8002d14 <HAL_ADC_AnalogWDGConfig+0x24c>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d000      	beq.n	8002c14 <HAL_ADC_AnalogWDGConfig+0x14c>
 8002c12:	e07d      	b.n	8002d10 <HAL_ADC_AnalogWDGConfig+0x248>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d000      	beq.n	8002c20 <HAL_ADC_AnalogWDGConfig+0x158>
 8002c1e:	e075      	b.n	8002d0c <HAL_ADC_AnalogWDGConfig+0x244>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	4013      	ands	r3, r2
 8002c28:	d000      	beq.n	8002c2c <HAL_ADC_AnalogWDGConfig+0x164>
 8002c2a:	e06d      	b.n	8002d08 <HAL_ADC_AnalogWDGConfig+0x240>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	4013      	ands	r3, r2
 8002c34:	d000      	beq.n	8002c38 <HAL_ADC_AnalogWDGConfig+0x170>
 8002c36:	e065      	b.n	8002d04 <HAL_ADC_AnalogWDGConfig+0x23c>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	d000      	beq.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x17e>
 8002c44:	e05b      	b.n	8002cfe <HAL_ADC_AnalogWDGConfig+0x236>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d152      	bne.n	8002cf8 <HAL_ADC_AnalogWDGConfig+0x230>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d149      	bne.n	8002cf2 <HAL_ADC_AnalogWDGConfig+0x22a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	4013      	ands	r3, r2
 8002c68:	d140      	bne.n	8002cec <HAL_ADC_AnalogWDGConfig+0x224>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	4013      	ands	r3, r2
 8002c74:	d137      	bne.n	8002ce6 <HAL_ADC_AnalogWDGConfig+0x21e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d12e      	bne.n	8002ce0 <HAL_ADC_AnalogWDGConfig+0x218>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	01db      	lsls	r3, r3, #7
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d125      	bne.n	8002cda <HAL_ADC_AnalogWDGConfig+0x212>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	4013      	ands	r3, r2
 8002c98:	d11c      	bne.n	8002cd4 <HAL_ADC_AnalogWDGConfig+0x20c>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	025b      	lsls	r3, r3, #9
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d113      	bne.n	8002cce <HAL_ADC_AnalogWDGConfig+0x206>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_AnalogWDGConfig+0x200>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	02db      	lsls	r3, r3, #11
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d002      	beq.n	8002cc4 <HAL_ADC_AnalogWDGConfig+0x1fc>
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	02db      	lsls	r3, r3, #11
 8002cc2:	e02e      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e02c      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	029b      	lsls	r3, r3, #10
 8002ccc:	e029      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	025b      	lsls	r3, r3, #9
 8002cd2:	e026      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	e023      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	01db      	lsls	r3, r3, #7
 8002cde:	e020      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	e01d      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	015b      	lsls	r3, r3, #5
 8002cea:	e01a      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	e017      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	e014      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	e011      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	e00e      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	e00c      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d08:	2340      	movs	r3, #64	; 0x40
 8002d0a:	e00a      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e008      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d10:	2310      	movs	r3, #16
 8002d12:	e006      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d14:	2308      	movs	r3, #8
 8002d16:	e004      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_AnalogWDGConfig+0x25a>
 8002d20:	2301      	movs	r3, #1
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	21a0      	movs	r1, #160	; 0xa0
 8002d2a:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 8002d2c:	e0d9      	b.n	8002ee2 <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22a4      	movs	r2, #164	; 0xa4
 8002d34:	5899      	ldr	r1, [r3, r2]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	035b      	lsls	r3, r3, #13
 8002d3c:	0b5b      	lsrs	r3, r3, #13
 8002d3e:	d113      	bne.n	8002d68 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	221f      	movs	r2, #31
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	e0af      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	7cc00000 	.word	0x7cc00000
 8002d58:	fc07ffff 	.word	0xfc07ffff
 8002d5c:	0087ffff 	.word	0x0087ffff
 8002d60:	fffeffff 	.word	0xfffeffff
 8002d64:	0017ffff 	.word	0x0017ffff
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d000      	beq.n	8002d74 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8002d72:	e09d      	b.n	8002eb0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d000      	beq.n	8002d80 <HAL_ADC_AnalogWDGConfig+0x2b8>
 8002d7e:	e095      	b.n	8002eac <HAL_ADC_AnalogWDGConfig+0x3e4>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2204      	movs	r2, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	d000      	beq.n	8002d8c <HAL_ADC_AnalogWDGConfig+0x2c4>
 8002d8a:	e08d      	b.n	8002ea8 <HAL_ADC_AnalogWDGConfig+0x3e0>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2208      	movs	r2, #8
 8002d92:	4013      	ands	r3, r2
 8002d94:	d000      	beq.n	8002d98 <HAL_ADC_AnalogWDGConfig+0x2d0>
 8002d96:	e085      	b.n	8002ea4 <HAL_ADC_AnalogWDGConfig+0x3dc>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d000      	beq.n	8002da4 <HAL_ADC_AnalogWDGConfig+0x2dc>
 8002da2:	e07d      	b.n	8002ea0 <HAL_ADC_AnalogWDGConfig+0x3d8>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2220      	movs	r2, #32
 8002daa:	4013      	ands	r3, r2
 8002dac:	d000      	beq.n	8002db0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002dae:	e075      	b.n	8002e9c <HAL_ADC_AnalogWDGConfig+0x3d4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2240      	movs	r2, #64	; 0x40
 8002db6:	4013      	ands	r3, r2
 8002db8:	d000      	beq.n	8002dbc <HAL_ADC_AnalogWDGConfig+0x2f4>
 8002dba:	e06d      	b.n	8002e98 <HAL_ADC_AnalogWDGConfig+0x3d0>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d000      	beq.n	8002dc8 <HAL_ADC_AnalogWDGConfig+0x300>
 8002dc6:	e065      	b.n	8002e94 <HAL_ADC_AnalogWDGConfig+0x3cc>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d000      	beq.n	8002dd6 <HAL_ADC_AnalogWDGConfig+0x30e>
 8002dd4:	e05b      	b.n	8002e8e <HAL_ADC_AnalogWDGConfig+0x3c6>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4013      	ands	r3, r2
 8002de0:	d152      	bne.n	8002e88 <HAL_ADC_AnalogWDGConfig+0x3c0>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4013      	ands	r3, r2
 8002dec:	d149      	bne.n	8002e82 <HAL_ADC_AnalogWDGConfig+0x3ba>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4013      	ands	r3, r2
 8002df8:	d140      	bne.n	8002e7c <HAL_ADC_AnalogWDGConfig+0x3b4>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	015b      	lsls	r3, r3, #5
 8002e02:	4013      	ands	r3, r2
 8002e04:	d137      	bne.n	8002e76 <HAL_ADC_AnalogWDGConfig+0x3ae>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d12e      	bne.n	8002e70 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	01db      	lsls	r3, r3, #7
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d125      	bne.n	8002e6a <HAL_ADC_AnalogWDGConfig+0x3a2>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4013      	ands	r3, r2
 8002e28:	d11c      	bne.n	8002e64 <HAL_ADC_AnalogWDGConfig+0x39c>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	025b      	lsls	r3, r3, #9
 8002e32:	4013      	ands	r3, r2
 8002e34:	d113      	bne.n	8002e5e <HAL_ADC_AnalogWDGConfig+0x396>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d10a      	bne.n	8002e58 <HAL_ADC_AnalogWDGConfig+0x390>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	02db      	lsls	r3, r3, #11
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d002      	beq.n	8002e54 <HAL_ADC_AnalogWDGConfig+0x38c>
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	02db      	lsls	r3, r3, #11
 8002e52:	e02e      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e02c      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	e029      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	025b      	lsls	r3, r3, #9
 8002e62:	e026      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	e023      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	01db      	lsls	r3, r3, #7
 8002e6e:	e020      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	019b      	lsls	r3, r3, #6
 8002e74:	e01d      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	015b      	lsls	r3, r3, #5
 8002e7a:	e01a      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	e017      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	e014      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	e011      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	e00e      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	e00c      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e98:	2340      	movs	r3, #64	; 0x40
 8002e9a:	e00a      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	e006      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	e004      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	e002      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e000      	b.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	21a4      	movs	r1, #164	; 0xa4
 8002eba:	5053      	str	r3, [r2, r1]
          break;
 8002ebc:	e011      	b.n	8002ee2 <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <HAL_ADC_AnalogWDGConfig+0x4fc>)
 8002ec8:	0019      	movs	r1, r3
 8002eca:	f7ff f8a3 	bl	8002014 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002ece:	e008      	b.n	8002ee2 <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	0019      	movs	r1, r3
 8002edc:	f7ff f89a 	bl	8002014 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002ee0:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <HAL_ADC_AnalogWDGConfig+0x500>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d11a      	bne.n	8002f22 <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_ADC_AnalogWDGConfig+0x504>)
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff f977 	bl	80021f0 <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7b1b      	ldrb	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff f994 	bl	800223c <LL_ADC_EnableIT_AWD2>
 8002f14:	e01f      	b.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff f9bc 	bl	8002298 <LL_ADC_DisableIT_AWD2>
 8002f20:	e019      	b.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <HAL_ADC_AnalogWDGConfig+0x508>)
 8002f28:	401a      	ands	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff f968 	bl	8002208 <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	7b1b      	ldrb	r3, [r3, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff f988 	bl	800225a <LL_ADC_EnableIT_AWD3>
 8002f4a:	e004      	b.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff f9b1 	bl	80022b8 <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_ADC_AnalogWDGConfig+0x50c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d118      	bne.n	8002f92 <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	400b      	ands	r3, r1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	0013      	movs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	08db      	lsrs	r3, r3, #3
 8002f84:	2103      	movs	r1, #3
 8002f86:	400b      	ands	r3, r1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e005      	b.n	8002f9e <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	f7ff f85f 	bl	800206c <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2254      	movs	r2, #84	; 0x54
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	781b      	ldrb	r3, [r3, #0]
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b006      	add	sp, #24
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	0087ffff 	.word	0x0087ffff
 8002fc8:	0017ffff 	.word	0x0017ffff
 8002fcc:	fffdffff 	.word	0xfffdffff
 8002fd0:	fffbffff 	.word	0xfffbffff
 8002fd4:	7cc00000 	.word	0x7cc00000

08002fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff f8b3 	bl	8002150 <LL_ADC_IsEnabled>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d149      	bne.n	8003082 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <ADC_Enable+0xb4>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d00d      	beq.n	8003016 <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	2210      	movs	r2, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	2201      	movs	r2, #1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e036      	b.n	8003084 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff f874 	bl	8002108 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7e5b      	ldrb	r3, [r3, #25]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d02c      	beq.n	8003082 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003028:	f7fe ff2a 	bl	8001e80 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003030:	e020      	b.n	8003074 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0018      	movs	r0, r3
 8003038:	f7ff f88a 	bl	8002150 <LL_ADC_IsEnabled>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d104      	bne.n	800304a <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff f85f 	bl	8002108 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304a:	f7fe ff19 	bl	8001e80 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d90d      	bls.n	8003074 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	2210      	movs	r2, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	2201      	movs	r2, #1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	2b01      	cmp	r3, #1
 8003080:	d1d7      	bne.n	8003032 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}
 800308c:	80000017 	.word	0x80000017

08003090 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0018      	movs	r0, r3
 800309e:	f7ff f868 	bl	8002172 <LL_ADC_IsDisableOngoing>
 80030a2:	0003      	movs	r3, r0
 80030a4:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff f850 	bl	8002150 <LL_ADC_IsEnabled>
 80030b0:	1e03      	subs	r3, r0, #0
 80030b2:	d040      	beq.n	8003136 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d13d      	bne.n	8003136 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2205      	movs	r2, #5
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff f82d 	bl	800212c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2203      	movs	r2, #3
 80030d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030da:	f7fe fed1 	bl	8001e80 <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	60bb      	str	r3, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e2:	e022      	b.n	800312a <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	2210      	movs	r2, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2201      	movs	r2, #1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e01b      	b.n	8003138 <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003100:	f7fe febe 	bl	8001e80 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d90d      	bls.n	800312a <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	2210      	movs	r2, #16
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2201      	movs	r2, #1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e006      	b.n	8003138 <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2201      	movs	r2, #1
 8003132:	4013      	ands	r3, r2
 8003134:	d1e4      	bne.n	8003100 <ADC_Disable+0x70>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b004      	add	sp, #16
 800313e:	bd80      	pop	{r7, pc}

08003140 <LL_ADC_IsEnabled>:
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <LL_ADC_IsEnabled+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_IsEnabled+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <LL_ADC_IsCalibrationOnGoing>:
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0fdb      	lsrs	r3, r3, #31
 8003170:	07da      	lsls	r2, r3, #31
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	429a      	cmp	r2, r3
 8003178:	d101      	bne.n	800317e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2254      	movs	r2, #84	; 0x54
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADCEx_Calibration_Start+0x1a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e06c      	b.n	800327c <HAL_ADCEx_Calibration_Start+0xf4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2254      	movs	r2, #84	; 0x54
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031aa:	2317      	movs	r3, #23
 80031ac:	18fc      	adds	r4, r7, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff ff6d 	bl	8003090 <ADC_Disable>
 80031b6:	0003      	movs	r3, r0
 80031b8:	7023      	strb	r3, [r4, #0]
  
  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff ffbe 	bl	8003140 <LL_ADC_IsEnabled>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d14c      	bne.n	8003262 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_ADCEx_Calibration_Start+0xfc>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	2202      	movs	r2, #2
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2203      	movs	r2, #3
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2103      	movs	r1, #3
 80031f0:	438a      	bics	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	0609      	lsls	r1, r1, #24
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003206:	e014      	b.n	8003232 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3301      	adds	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_ADCEx_Calibration_Start+0x100>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d90d      	bls.n	8003232 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	2212      	movs	r2, #18
 800321c:	4393      	bics	r3, r2
 800321e:	2210      	movs	r2, #16
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2254      	movs	r2, #84	; 0x54
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e024      	b.n	800327c <HAL_ADCEx_Calibration_Start+0xf4>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff ff93 	bl	8003162 <LL_ADC_IsCalibrationOnGoing>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d1e3      	bne.n	8003208 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68d9      	ldr	r1, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	2203      	movs	r2, #3
 8003256:	4393      	bics	r3, r2
 8003258:	2201      	movs	r2, #1
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
 8003260:	e005      	b.n	800326e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	2210      	movs	r2, #16
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2254      	movs	r2, #84	; 0x54
 8003272:	2100      	movs	r1, #0
 8003274:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003276:	2317      	movs	r3, #23
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b007      	add	sp, #28
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	fffffefd 	.word	0xfffffefd
 8003288:	0002f1ff 	.word	0x0002f1ff

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	0002      	movs	r2, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	1dfb      	adds	r3, r7, #7
 8003298:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800329a:	1dfb      	adds	r3, r7, #7
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b7f      	cmp	r3, #127	; 0x7f
 80032a0:	d828      	bhi.n	80032f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a2:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <__NVIC_SetPriority+0xd4>)
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	33c0      	adds	r3, #192	; 0xc0
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	589b      	ldr	r3, [r3, r2]
 80032b2:	1dfa      	adds	r2, r7, #7
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	0011      	movs	r1, r2
 80032b8:	2203      	movs	r2, #3
 80032ba:	400a      	ands	r2, r1
 80032bc:	00d2      	lsls	r2, r2, #3
 80032be:	21ff      	movs	r1, #255	; 0xff
 80032c0:	4091      	lsls	r1, r2
 80032c2:	000a      	movs	r2, r1
 80032c4:	43d2      	mvns	r2, r2
 80032c6:	401a      	ands	r2, r3
 80032c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	22ff      	movs	r2, #255	; 0xff
 80032d0:	401a      	ands	r2, r3
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	0018      	movs	r0, r3
 80032d8:	2303      	movs	r3, #3
 80032da:	4003      	ands	r3, r0
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e0:	481f      	ldr	r0, [pc, #124]	; (8003360 <__NVIC_SetPriority+0xd4>)
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	430a      	orrs	r2, r1
 80032ec:	33c0      	adds	r3, #192	; 0xc0
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032f2:	e031      	b.n	8003358 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <__NVIC_SetPriority+0xd8>)
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	0019      	movs	r1, r3
 80032fc:	230f      	movs	r3, #15
 80032fe:	400b      	ands	r3, r1
 8003300:	3b08      	subs	r3, #8
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	3306      	adds	r3, #6
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	3304      	adds	r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	1dfa      	adds	r2, r7, #7
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	0011      	movs	r1, r2
 8003314:	2203      	movs	r2, #3
 8003316:	400a      	ands	r2, r1
 8003318:	00d2      	lsls	r2, r2, #3
 800331a:	21ff      	movs	r1, #255	; 0xff
 800331c:	4091      	lsls	r1, r2
 800331e:	000a      	movs	r2, r1
 8003320:	43d2      	mvns	r2, r2
 8003322:	401a      	ands	r2, r3
 8003324:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	22ff      	movs	r2, #255	; 0xff
 800332c:	401a      	ands	r2, r3
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	0018      	movs	r0, r3
 8003334:	2303      	movs	r3, #3
 8003336:	4003      	ands	r3, r0
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800333c:	4809      	ldr	r0, [pc, #36]	; (8003364 <__NVIC_SetPriority+0xd8>)
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	001c      	movs	r4, r3
 8003344:	230f      	movs	r3, #15
 8003346:	4023      	ands	r3, r4
 8003348:	3b08      	subs	r3, #8
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	430a      	orrs	r2, r1
 800334e:	3306      	adds	r3, #6
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	18c3      	adds	r3, r0, r3
 8003354:	3304      	adds	r3, #4
 8003356:	601a      	str	r2, [r3, #0]
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b003      	add	sp, #12
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	e000e100 	.word	0xe000e100
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <SysTick_Config+0x40>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e010      	b.n	80033a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <SysTick_Config+0x44>)
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	3a01      	subs	r2, #1
 8003384:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	2301      	movs	r3, #1
 8003388:	425b      	negs	r3, r3
 800338a:	2103      	movs	r1, #3
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff ff7d 	bl	800328c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <SysTick_Config+0x44>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <SysTick_Config+0x44>)
 800339a:	2207      	movs	r2, #7
 800339c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339e:	2300      	movs	r3, #0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	00ffffff 	.word	0x00ffffff
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	210f      	movs	r1, #15
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	1c02      	adds	r2, r0, #0
 80033c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	0011      	movs	r1, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff ff5d 	bl	800328c <__NVIC_SetPriority>
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff ffbf 	bl	8003368 <SysTick_Config>
 80033ea:	0003      	movs	r3, r0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_FLASH_Unlock+0x3c>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	da0c      	bge.n	8003422 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_FLASH_Unlock+0x3c>)
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_FLASH_Unlock+0x40>)
 800340c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_FLASH_Unlock+0x3c>)
 8003410:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HAL_FLASH_Unlock+0x44>)
 8003412:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_FLASH_Unlock+0x3c>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da02      	bge.n	8003422 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	40022000 	.word	0x40022000
 8003434:	45670123 	.word	0x45670123
 8003438:	cdef89ab 	.word	0xcdef89ab

0800343c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_FLASH_Lock+0x34>)
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_FLASH_Lock+0x34>)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0609      	lsls	r1, r1, #24
 8003452:	430a      	orrs	r2, r1
 8003454:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_FLASH_Lock+0x34>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	da02      	bge.n	8003464 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003464:	1dfb      	adds	r3, r7, #7
 8003466:	781b      	ldrb	r3, [r3, #0]
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40022000 	.word	0x40022000

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003482:	e147      	b.n	8003714 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4091      	lsls	r1, r2
 800348e:	000a      	movs	r2, r1
 8003490:	4013      	ands	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d100      	bne.n	800349c <HAL_GPIO_Init+0x28>
 800349a:	e138      	b.n	800370e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x38>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b12      	cmp	r3, #18
 80034aa:	d123      	bne.n	80034f4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	58d3      	ldr	r3, [r2, r3]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2207      	movs	r2, #7
 80034be:	4013      	ands	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	409a      	lsls	r2, r3
 80034c6:	0013      	movs	r3, r2
 80034c8:	43da      	mvns	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2107      	movs	r1, #7
 80034d8:	400b      	ands	r3, r1
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	409a      	lsls	r2, r3
 80034de:	0013      	movs	r3, r2
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	08da      	lsrs	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3208      	adds	r2, #8
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	6939      	ldr	r1, [r7, #16]
 80034f2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	409a      	lsls	r2, r3
 8003502:	0013      	movs	r3, r2
 8003504:	43da      	mvns	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2203      	movs	r2, #3
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	0013      	movs	r3, r2
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d00b      	beq.n	8003548 <HAL_GPIO_Init+0xd4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d007      	beq.n	8003548 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353c:	2b11      	cmp	r3, #17
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b12      	cmp	r3, #18
 8003546:	d130      	bne.n	80035aa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	409a      	lsls	r2, r3
 8003556:	0013      	movs	r3, r2
 8003558:	43da      	mvns	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	409a      	lsls	r2, r3
 800356a:	0013      	movs	r3, r2
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357e:	2201      	movs	r2, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	409a      	lsls	r2, r3
 8003584:	0013      	movs	r3, r2
 8003586:	43da      	mvns	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	2201      	movs	r2, #1
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	43da      	mvns	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	0013      	movs	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	055b      	lsls	r3, r3, #21
 80035e2:	4013      	ands	r3, r2
 80035e4:	d100      	bne.n	80035e8 <HAL_GPIO_Init+0x174>
 80035e6:	e092      	b.n	800370e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035e8:	4a50      	ldr	r2, [pc, #320]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3318      	adds	r3, #24
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	589b      	ldr	r3, [r3, r2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4013      	ands	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	220f      	movs	r2, #15
 8003600:	409a      	lsls	r2, r3
 8003602:	0013      	movs	r3, r2
 8003604:	43da      	mvns	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	23a0      	movs	r3, #160	; 0xa0
 8003610:	05db      	lsls	r3, r3, #23
 8003612:	429a      	cmp	r2, r3
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0x1ca>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a45      	ldr	r2, [pc, #276]	; (8003730 <HAL_GPIO_Init+0x2bc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00d      	beq.n	800363a <HAL_GPIO_Init+0x1c6>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a44      	ldr	r2, [pc, #272]	; (8003734 <HAL_GPIO_Init+0x2c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <HAL_GPIO_Init+0x1c2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a43      	ldr	r2, [pc, #268]	; (8003738 <HAL_GPIO_Init+0x2c4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_GPIO_Init+0x1be>
 800362e:	2303      	movs	r3, #3
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 8003632:	2305      	movs	r3, #5
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 800363e:	2300      	movs	r3, #0
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	2103      	movs	r1, #3
 8003644:	400a      	ands	r2, r1
 8003646:	00d2      	lsls	r2, r2, #3
 8003648:	4093      	lsls	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003650:	4936      	ldr	r1, [pc, #216]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3318      	adds	r3, #24
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800365e:	4a33      	ldr	r2, [pc, #204]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	58d3      	ldr	r3, [r2, r3]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43da      	mvns	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	025b      	lsls	r3, r3, #9
 8003678:	4013      	ands	r3, r2
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003684:	4929      	ldr	r1, [pc, #164]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800368c:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_GPIO_Init+0x2b8>)
 800368e:	2384      	movs	r3, #132	; 0x84
 8003690:	58d3      	ldr	r3, [r2, r3]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43da      	mvns	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	4013      	ands	r3, r2
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036b2:	491e      	ldr	r1, [pc, #120]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036b4:	2284      	movs	r2, #132	; 0x84
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	035b      	lsls	r3, r3, #13
 80036d2:	4013      	ands	r3, r2
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	039b      	lsls	r3, r3, #14
 80036fc:	4013      	ands	r3, r2
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_GPIO_Init+0x2b8>)
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	40da      	lsrs	r2, r3
 800371c:	1e13      	subs	r3, r2, #0
 800371e:	d000      	beq.n	8003722 <HAL_GPIO_Init+0x2ae>
 8003720:	e6b0      	b.n	8003484 <HAL_GPIO_Init+0x10>
  }
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b006      	add	sp, #24
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	40021800 	.word	0x40021800
 8003730:	50000400 	.word	0x50000400
 8003734:	50000800 	.word	0x50000800
 8003738:	50000c00 	.word	0x50000c00

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	0008      	movs	r0, r1
 8003746:	0011      	movs	r1, r2
 8003748:	1cbb      	adds	r3, r7, #2
 800374a:	1c02      	adds	r2, r0, #0
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	1c7b      	adds	r3, r7, #1
 8003750:	1c0a      	adds	r2, r1, #0
 8003752:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003754:	1c7b      	adds	r3, r7, #1
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375c:	1cbb      	adds	r3, r7, #2
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b002      	add	sp, #8
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d11f      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	0013      	movs	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4912      	ldr	r1, [pc, #72]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7fc fcaa 	bl	8000104 <__udivsi3>
 80037b0:	0003      	movs	r3, r0
 80037b2:	3301      	adds	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b6:	e008      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e001      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e009      	b.n	80037de <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	401a      	ands	r2, r3
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	429a      	cmp	r2, r3
 80037da:	d0ed      	beq.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	40007000 	.word	0x40007000
 80037ec:	fffff9ff 	.word	0xfffff9ff
 80037f0:	2000001c 	.word	0x2000001c
 80037f4:	000f4240 	.word	0x000f4240

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e304      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	4013      	ands	r3, r2
 8003812:	d100      	bne.n	8003816 <HAL_RCC_OscConfig+0x1e>
 8003814:	e07c      	b.n	8003910 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003816:	4bc3      	ldr	r3, [pc, #780]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2238      	movs	r2, #56	; 0x38
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003820:	4bc0      	ldr	r3, [pc, #768]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2203      	movs	r2, #3
 8003826:	4013      	ands	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b10      	cmp	r3, #16
 800382e:	d102      	bne.n	8003836 <HAL_RCC_OscConfig+0x3e>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d002      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4bb9      	ldr	r3, [pc, #740]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	4013      	ands	r3, r2
 8003846:	d062      	beq.n	800390e <HAL_RCC_OscConfig+0x116>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d15e      	bne.n	800390e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e2df      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	025b      	lsls	r3, r3, #9
 800385c:	429a      	cmp	r2, r3
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x78>
 8003860:	4bb0      	ldr	r3, [pc, #704]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4baf      	ldr	r3, [pc, #700]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	0249      	lsls	r1, r1, #9
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e020      	b.n	80038b2 <HAL_RCC_OscConfig+0xba>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	23a0      	movs	r3, #160	; 0xa0
 8003876:	02db      	lsls	r3, r3, #11
 8003878:	429a      	cmp	r2, r3
 800387a:	d10e      	bne.n	800389a <HAL_RCC_OscConfig+0xa2>
 800387c:	4ba9      	ldr	r3, [pc, #676]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4ba8      	ldr	r3, [pc, #672]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	02c9      	lsls	r1, r1, #11
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4ba6      	ldr	r3, [pc, #664]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4ba5      	ldr	r3, [pc, #660]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	0249      	lsls	r1, r1, #9
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e00b      	b.n	80038b2 <HAL_RCC_OscConfig+0xba>
 800389a:	4ba2      	ldr	r3, [pc, #648]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4ba1      	ldr	r3, [pc, #644]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80038a0:	49a1      	ldr	r1, [pc, #644]	; (8003b28 <HAL_RCC_OscConfig+0x330>)
 80038a2:	400a      	ands	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	4b9f      	ldr	r3, [pc, #636]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b9e      	ldr	r3, [pc, #632]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80038ac:	499f      	ldr	r1, [pc, #636]	; (8003b2c <HAL_RCC_OscConfig+0x334>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d014      	beq.n	80038e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fe fae1 	bl	8001e80 <HAL_GetTick>
 80038be:	0003      	movs	r3, r0
 80038c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fe fadc 	bl	8001e80 <HAL_GetTick>
 80038c8:	0002      	movs	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e29e      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d6:	4b93      	ldr	r3, [pc, #588]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	029b      	lsls	r3, r3, #10
 80038de:	4013      	ands	r3, r2
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0xcc>
 80038e2:	e015      	b.n	8003910 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe facc 	bl	8001e80 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ee:	f7fe fac7 	bl	8001e80 <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	; 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e289      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003900:	4b88      	ldr	r3, [pc, #544]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	029b      	lsls	r3, r3, #10
 8003908:	4013      	ands	r3, r2
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0xf6>
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2202      	movs	r2, #2
 8003916:	4013      	ands	r3, r2
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x124>
 800391a:	e099      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391c:	4b81      	ldr	r3, [pc, #516]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2238      	movs	r2, #56	; 0x38
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003926:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2203      	movs	r2, #3
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b10      	cmp	r3, #16
 8003934:	d102      	bne.n	800393c <HAL_RCC_OscConfig+0x144>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d002      	beq.n	8003942 <HAL_RCC_OscConfig+0x14a>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d135      	bne.n	80039ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003942:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4013      	ands	r3, r2
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x162>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e25c      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a74      	ldr	r2, [pc, #464]	; (8003b30 <HAL_RCC_OscConfig+0x338>)
 8003960:	4013      	ands	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	021a      	lsls	r2, r3, #8
 800396a:	4b6e      	ldr	r3, [pc, #440]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d112      	bne.n	800399c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003976:	4b6b      	ldr	r3, [pc, #428]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <HAL_RCC_OscConfig+0x33c>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800398a:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0adb      	lsrs	r3, r3, #11
 8003990:	2207      	movs	r2, #7
 8003992:	4013      	ands	r3, r2
 8003994:	4a68      	ldr	r2, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x340>)
 8003996:	40da      	lsrs	r2, r3
 8003998:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x344>)
 800399a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x348>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7fe fa13 	bl	8001dcc <HAL_InitTick>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d051      	beq.n	8003a4e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e232      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d030      	beq.n	8003a18 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039b6:	4b5b      	ldr	r3, [pc, #364]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5e      	ldr	r2, [pc, #376]	; (8003b34 <HAL_RCC_OscConfig+0x33c>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b55      	ldr	r3, [pc, #340]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80039d0:	2180      	movs	r1, #128	; 0x80
 80039d2:	0049      	lsls	r1, r1, #1
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fa52 	bl	8001e80 <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe fa4d 	bl	8001e80 <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e20f      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4013      	ands	r3, r2
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b48      	ldr	r3, [pc, #288]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	; (8003b30 <HAL_RCC_OscConfig+0x338>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	021a      	lsls	r2, r3, #8
 8003a10:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e01b      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a18:	4b42      	ldr	r3, [pc, #264]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	4949      	ldr	r1, [pc, #292]	; (8003b44 <HAL_RCC_OscConfig+0x34c>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fa2c 	bl	8001e80 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fa27 	bl	8001e80 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1e9      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a40:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x236>
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2208      	movs	r2, #8
 8003a56:	4013      	ands	r3, r2
 8003a58:	d047      	beq.n	8003aea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003a5a:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2238      	movs	r2, #56	; 0x38
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b18      	cmp	r3, #24
 8003a64:	d10a      	bne.n	8003a7c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a66:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d03c      	beq.n	8003aea <HAL_RCC_OscConfig+0x2f2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d138      	bne.n	8003aea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e1cb      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a88:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe f9f6 	bl	8001e80 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe f9f1 	bl	8001e80 <HAL_GetTick>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1b3      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d0f1      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2a2>
 8003ab6:	e018      	b.n	8003aea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	2101      	movs	r1, #1
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe f9dc 	bl	8001e80 <HAL_GetTick>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ace:	f7fe f9d7 	bl	8001e80 <HAL_GetTick>
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e199      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d1f1      	bne.n	8003ace <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d100      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2fe>
 8003af4:	e0c6      	b.n	8003c84 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af6:	231f      	movs	r3, #31
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2238      	movs	r2, #56	; 0x38
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d11e      	bne.n	8003b48 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4013      	ands	r3, r2
 8003b12:	d100      	bne.n	8003b16 <HAL_RCC_OscConfig+0x31e>
 8003b14:	e0b6      	b.n	8003c84 <HAL_RCC_OscConfig+0x48c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d000      	beq.n	8003b20 <HAL_RCC_OscConfig+0x328>
 8003b1e:	e0b1      	b.n	8003c84 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e177      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
 8003b24:	40021000 	.word	0x40021000
 8003b28:	fffeffff 	.word	0xfffeffff
 8003b2c:	fffbffff 	.word	0xfffbffff
 8003b30:	ffff80ff 	.word	0xffff80ff
 8003b34:	ffffc7ff 	.word	0xffffc7ff
 8003b38:	00f42400 	.word	0x00f42400
 8003b3c:	2000001c 	.word	0x2000001c
 8003b40:	20000020 	.word	0x20000020
 8003b44:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b48:	4bb4      	ldr	r3, [pc, #720]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	055b      	lsls	r3, r3, #21
 8003b50:	4013      	ands	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x360>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x362>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4baf      	ldr	r3, [pc, #700]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b62:	4bae      	ldr	r3, [pc, #696]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0549      	lsls	r1, r1, #21
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b6c:	4bab      	ldr	r3, [pc, #684]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	055b      	lsls	r3, r3, #21
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b82:	4ba7      	ldr	r3, [pc, #668]	; (8003e20 <HAL_RCC_OscConfig+0x628>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d11a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b8e:	4ba4      	ldr	r3, [pc, #656]	; (8003e20 <HAL_RCC_OscConfig+0x628>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4ba3      	ldr	r3, [pc, #652]	; (8003e20 <HAL_RCC_OscConfig+0x628>)
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	0049      	lsls	r1, r1, #1
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe f970 	bl	8001e80 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fe f96b 	bl	8001e80 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e12d      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <HAL_RCC_OscConfig+0x628>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x3e2>
 8003bcc:	4b93      	ldr	r3, [pc, #588]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bd0:	4b92      	ldr	r3, [pc, #584]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bd8:	e01c      	b.n	8003c14 <HAL_RCC_OscConfig+0x41c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x404>
 8003be2:	4b8e      	ldr	r3, [pc, #568]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003be6:	4b8d      	ldr	r3, [pc, #564]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003be8:	2104      	movs	r1, #4
 8003bea:	430a      	orrs	r2, r1
 8003bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bee:	4b8b      	ldr	r3, [pc, #556]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003bf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bf2:	4b8a      	ldr	r3, [pc, #552]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0x41c>
 8003bfc:	4b87      	ldr	r3, [pc, #540]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c00:	4b86      	ldr	r3, [pc, #536]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c02:	2101      	movs	r1, #1
 8003c04:	438a      	bics	r2, r1
 8003c06:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c08:	4b84      	ldr	r3, [pc, #528]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c0c:	4b83      	ldr	r3, [pc, #524]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c0e:	2104      	movs	r1, #4
 8003c10:	438a      	bics	r2, r1
 8003c12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d014      	beq.n	8003c46 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe f930 	bl	8001e80 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c24:	e009      	b.n	8003c3a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fe f92b 	bl	8001e80 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	4a7c      	ldr	r2, [pc, #496]	; (8003e24 <HAL_RCC_OscConfig+0x62c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0ec      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3a:	4b78      	ldr	r3, [pc, #480]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x42e>
 8003c44:	e013      	b.n	8003c6e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe f91b 	bl	8001e80 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c4e:	e009      	b.n	8003c64 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe f916 	bl	8001e80 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	4a72      	ldr	r2, [pc, #456]	; (8003e24 <HAL_RCC_OscConfig+0x62c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0d7      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c64:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c78:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c7c:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c7e:	496a      	ldr	r1, [pc, #424]	; (8003e28 <HAL_RCC_OscConfig+0x630>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d100      	bne.n	8003c8e <HAL_RCC_OscConfig+0x496>
 8003c8c:	e0c1      	b.n	8003e12 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2238      	movs	r2, #56	; 0x38
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d100      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4a4>
 8003c9a:	e081      	b.n	8003da0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d156      	bne.n	8003d52 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003caa:	4960      	ldr	r1, [pc, #384]	; (8003e2c <HAL_RCC_OscConfig+0x634>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f8e6 	bl	8001e80 <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fe f8e1 	bl	8001e80 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0a3      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	049b      	lsls	r3, r3, #18
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd8:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a54      	ldr	r2, [pc, #336]	; (8003e30 <HAL_RCC_OscConfig+0x638>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	431a      	orrs	r2, r3
 8003d06:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b42      	ldr	r3, [pc, #264]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	0449      	lsls	r1, r1, #17
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d1a:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	0549      	lsls	r1, r1, #21
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe f8aa 	bl	8001e80 <HAL_GetTick>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fe f8a5 	bl	8001e80 <HAL_GetTick>
 8003d36:	0002      	movs	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e067      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d44:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	049b      	lsls	r3, r3, #18
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x53a>
 8003d50:	e05f      	b.n	8003e12 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d58:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x634>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d64:	2103      	movs	r1, #3
 8003d66:	438a      	bics	r2, r1
 8003d68:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d70:	4930      	ldr	r1, [pc, #192]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fe f883 	bl	8001e80 <HAL_GetTick>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe f87e 	bl	8001e80 <HAL_GetTick>
 8003d84:	0002      	movs	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e040      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	049b      	lsls	r3, r3, #18
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x588>
 8003d9e:	e038      	b.n	8003e12 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e033      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x624>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2203      	movs	r2, #3
 8003db6:	401a      	ands	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d126      	bne.n	8003e0e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2270      	movs	r2, #112	; 0x70
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	23fe      	movs	r3, #254	; 0xfe
 8003dd2:	01db      	lsls	r3, r3, #7
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d116      	bne.n	8003e0e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	23f8      	movs	r3, #248	; 0xf8
 8003de4:	039b      	lsls	r3, r3, #14
 8003de6:	401a      	ands	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d10e      	bne.n	8003e0e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	23e0      	movs	r3, #224	; 0xe0
 8003df4:	051b      	lsls	r3, r3, #20
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	0f5b      	lsrs	r3, r3, #29
 8003e04:	075a      	lsls	r2, r3, #29
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b008      	add	sp, #32
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	00001388 	.word	0x00001388
 8003e28:	efffffff 	.word	0xefffffff
 8003e2c:	feffffff 	.word	0xfeffffff
 8003e30:	11c1808c 	.word	0x11c1808c
 8003e34:	eefeffff 	.word	0xeefeffff

08003e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0e9      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2207      	movs	r2, #7
 8003e52:	4013      	ands	r3, r2
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d91e      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b73      	ldr	r3, [pc, #460]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4393      	bics	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	4b70      	ldr	r3, [pc, #448]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e6c:	f7fe f808 	bl	8001e80 <HAL_GetTick>
 8003e70:	0003      	movs	r3, r0
 8003e72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e74:	e009      	b.n	8003e8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e76:	f7fe f803 	bl	8001e80 <HAL_GetTick>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_RCC_ClockConfig+0x1f4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0ca      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2207      	movs	r2, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1ee      	bne.n	8003e76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d015      	beq.n	8003ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d006      	beq.n	8003eba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003eac:	4b60      	ldr	r3, [pc, #384]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003eb2:	21e0      	movs	r1, #224	; 0xe0
 8003eb4:	01c9      	lsls	r1, r1, #7
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eba:	4b5d      	ldr	r3, [pc, #372]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4a5d      	ldr	r2, [pc, #372]	; (8004034 <HAL_RCC_ClockConfig+0x1fc>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4b59      	ldr	r3, [pc, #356]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d057      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d12b      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e097      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	049b      	lsls	r3, r3, #18
 8003f00:	4013      	ands	r3, r2
 8003f02:	d11f      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e08b      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f10:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d113      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e07f      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d108      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e074      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e06d      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f44:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2207      	movs	r2, #7
 8003f4a:	4393      	bics	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003f54:	430a      	orrs	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd ff92 	bl	8001e80 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f60:	e009      	b.n	8003f76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f62:	f7fd ff8d 	bl	8001e80 <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <HAL_RCC_ClockConfig+0x1f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e054      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2238      	movs	r2, #56	; 0x38
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1ec      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	4013      	ands	r3, r2
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d21e      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2207      	movs	r2, #7
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa8:	f7fd ff6a 	bl	8001e80 <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb2:	f7fd ff65 	bl	8001e80 <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_RCC_ClockConfig+0x1f4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e02c      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2207      	movs	r2, #7
 8003fcc:	4013      	ands	r3, r2
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1ee      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2204      	movs	r2, #4
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4a15      	ldr	r2, [pc, #84]	; (8004038 <HAL_RCC_ClockConfig+0x200>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ff2:	f000 f829 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003ff6:	0001      	movs	r1, r0
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	220f      	movs	r2, #15
 8004000:	401a      	ands	r2, r3
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x204>)
 8004004:	0092      	lsls	r2, r2, #2
 8004006:	58d3      	ldr	r3, [r2, r3]
 8004008:	221f      	movs	r2, #31
 800400a:	4013      	ands	r3, r2
 800400c:	000a      	movs	r2, r1
 800400e:	40da      	lsrs	r2, r3
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x208>)
 8004012:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_ClockConfig+0x20c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0018      	movs	r0, r3
 800401a:	f7fd fed7 	bl	8001dcc <HAL_InitTick>
 800401e:	0003      	movs	r3, r0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40022000 	.word	0x40022000
 800402c:	00001388 	.word	0x00001388
 8004030:	40021000 	.word	0x40021000
 8004034:	fffff0ff 	.word	0xfffff0ff
 8004038:	ffff8fff 	.word	0xffff8fff
 800403c:	08004570 	.word	0x08004570
 8004040:	2000001c 	.word	0x2000001c
 8004044:	20000020 	.word	0x20000020

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404e:	4b3c      	ldr	r3, [pc, #240]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2238      	movs	r2, #56	; 0x38
 8004054:	4013      	ands	r3, r2
 8004056:	d10f      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0adb      	lsrs	r3, r3, #11
 800405e:	2207      	movs	r2, #7
 8004060:	4013      	ands	r3, r2
 8004062:	2201      	movs	r2, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	0013      	movs	r3, r2
 8004068:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	4835      	ldr	r0, [pc, #212]	; (8004144 <HAL_RCC_GetSysClockFreq+0xfc>)
 800406e:	f7fc f849 	bl	8000104 <__udivsi3>
 8004072:	0003      	movs	r3, r0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e05d      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2238      	movs	r2, #56	; 0x38
 800407e:	4013      	ands	r3, r2
 8004080:	2b08      	cmp	r3, #8
 8004082:	d102      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004084:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_RCC_GetSysClockFreq+0x100>)
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	e054      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2238      	movs	r2, #56	; 0x38
 8004090:	4013      	ands	r3, r2
 8004092:	2b10      	cmp	r3, #16
 8004094:	d138      	bne.n	8004108 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004096:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2203      	movs	r2, #3
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	2207      	movs	r2, #7
 80040a8:	4013      	ands	r3, r2
 80040aa:	3301      	adds	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	4824      	ldr	r0, [pc, #144]	; (8004148 <HAL_RCC_GetSysClockFreq+0x100>)
 80040b8:	f7fc f824 	bl	8000104 <__udivsi3>
 80040bc:	0003      	movs	r3, r0
 80040be:	0019      	movs	r1, r3
 80040c0:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	227f      	movs	r2, #127	; 0x7f
 80040c8:	4013      	ands	r3, r2
 80040ca:	434b      	muls	r3, r1
 80040cc:	617b      	str	r3, [r7, #20]
        break;
 80040ce:	e00d      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	481c      	ldr	r0, [pc, #112]	; (8004144 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040d4:	f7fc f816 	bl	8000104 <__udivsi3>
 80040d8:	0003      	movs	r3, r0
 80040da:	0019      	movs	r1, r3
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	227f      	movs	r2, #127	; 0x7f
 80040e4:	4013      	ands	r3, r2
 80040e6:	434b      	muls	r3, r1
 80040e8:	617b      	str	r3, [r7, #20]
        break;
 80040ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0f5b      	lsrs	r3, r3, #29
 80040f2:	2207      	movs	r2, #7
 80040f4:	4013      	ands	r3, r2
 80040f6:	3301      	adds	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	6978      	ldr	r0, [r7, #20]
 80040fe:	f7fc f801 	bl	8000104 <__udivsi3>
 8004102:	0003      	movs	r3, r0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e015      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2238      	movs	r2, #56	; 0x38
 800410e:	4013      	ands	r3, r2
 8004110:	2b20      	cmp	r3, #32
 8004112:	d103      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2238      	movs	r2, #56	; 0x38
 8004122:	4013      	ands	r3, r2
 8004124:	2b18      	cmp	r3, #24
 8004126:	d103      	bne.n	8004130 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004128:	23fa      	movs	r3, #250	; 0xfa
 800412a:	01db      	lsls	r3, r3, #7
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	e001      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004134:	693b      	ldr	r3, [r7, #16]
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b006      	add	sp, #24
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	40021000 	.word	0x40021000
 8004144:	00f42400 	.word	0x00f42400
 8004148:	007a1200 	.word	0x007a1200

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004154:	2313      	movs	r3, #19
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800415c:	2312      	movs	r3, #18
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	4013      	ands	r3, r2
 800416e:	d100      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004170:	e0a4      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004172:	2311      	movs	r3, #17
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417a:	4ba5      	ldr	r3, [pc, #660]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800417c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	055b      	lsls	r3, r3, #21
 8004182:	4013      	ands	r3, r2
 8004184:	d111      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	4ba2      	ldr	r3, [pc, #648]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418a:	4ba1      	ldr	r3, [pc, #644]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	0549      	lsls	r1, r1, #21
 8004190:	430a      	orrs	r2, r1
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
 8004194:	4b9e      	ldr	r3, [pc, #632]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	055b      	lsls	r3, r3, #21
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2311      	movs	r3, #17
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041aa:	4b9a      	ldr	r3, [pc, #616]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	0049      	lsls	r1, r1, #1
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b8:	f7fd fe62 	bl	8001e80 <HAL_GetTick>
 80041bc:	0003      	movs	r3, r0
 80041be:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c0:	e00b      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c2:	f7fd fe5d 	bl	8001e80 <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d904      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80041d0:	2313      	movs	r3, #19
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2203      	movs	r2, #3
 80041d6:	701a      	strb	r2, [r3, #0]
        break;
 80041d8:	e005      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041da:	4b8e      	ldr	r3, [pc, #568]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	d0ed      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80041e6:	2313      	movs	r3, #19
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d154      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041f0:	4b87      	ldr	r3, [pc, #540]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4013      	ands	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d019      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	429a      	cmp	r2, r3
 800420a:	d014      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800420c:	4b80      	ldr	r3, [pc, #512]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	4a81      	ldr	r2, [pc, #516]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004212:	4013      	ands	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b7e      	ldr	r3, [pc, #504]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800421a:	4b7d      	ldr	r3, [pc, #500]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0249      	lsls	r1, r1, #9
 8004220:	430a      	orrs	r2, r1
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004224:	4b7a      	ldr	r3, [pc, #488]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004228:	4b79      	ldr	r3, [pc, #484]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800422a:	497c      	ldr	r1, [pc, #496]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800422c:	400a      	ands	r2, r1
 800422e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004230:	4b77      	ldr	r3, [pc, #476]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2201      	movs	r2, #1
 800423a:	4013      	ands	r3, r2
 800423c:	d016      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fe1f 	bl	8001e80 <HAL_GetTick>
 8004242:	0003      	movs	r3, r0
 8004244:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	e00c      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd fe1a 	bl	8001e80 <HAL_GetTick>
 800424c:	0002      	movs	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	4a73      	ldr	r2, [pc, #460]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d904      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004258:	2313      	movs	r3, #19
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2203      	movs	r2, #3
 800425e:	701a      	strb	r2, [r3, #0]
            break;
 8004260:	e004      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004262:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	2202      	movs	r2, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d0ed      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800426c:	2313      	movs	r3, #19
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004276:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	4a67      	ldr	r2, [pc, #412]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800427c:	4013      	ands	r3, r2
 800427e:	0019      	movs	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004286:	430a      	orrs	r2, r1
 8004288:	65da      	str	r2, [r3, #92]	; 0x5c
 800428a:	e00c      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428c:	2312      	movs	r3, #18
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2213      	movs	r2, #19
 8004292:	18ba      	adds	r2, r7, r2
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e005      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429a:	2312      	movs	r3, #18
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	2213      	movs	r2, #19
 80042a0:	18ba      	adds	r2, r7, r2
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a6:	2311      	movs	r3, #17
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b6:	495b      	ldr	r1, [pc, #364]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4013      	ands	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c6:	4b52      	ldr	r3, [pc, #328]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	2203      	movs	r2, #3
 80042cc:	4393      	bics	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d6:	430a      	orrs	r2, r1
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2220      	movs	r2, #32
 80042e0:	4013      	ands	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042e4:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4013      	ands	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	4a48      	ldr	r2, [pc, #288]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004314:	430a      	orrs	r2, r1
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4013      	ands	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004324:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	4a41      	ldr	r2, [pc, #260]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800432a:	4013      	ands	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004334:	430a      	orrs	r2, r1
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2240      	movs	r2, #64	; 0x40
 800433e:	4013      	ands	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004352:	430a      	orrs	r2, r1
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4013      	ands	r3, r2
 8004360:	d015      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	0899      	lsrs	r1, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004370:	430a      	orrs	r2, r1
 8004372:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	05db      	lsls	r3, r3, #23
 800437c:	429a      	cmp	r2, r3
 800437e:	d106      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004380:	4b23      	ldr	r3, [pc, #140]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	0249      	lsls	r1, r1, #9
 800438a:	430a      	orrs	r2, r1
 800438c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	039b      	lsls	r3, r3, #14
 8004396:	4013      	ands	r3, r2
 8004398:	d016      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	0019      	movs	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1a      	ldr	r2, [r3, #32]
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043aa:	430a      	orrs	r2, r1
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	03db      	lsls	r3, r3, #15
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d106      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	0449      	lsls	r1, r1, #17
 80043c4:	430a      	orrs	r2, r1
 80043c6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4013      	ands	r3, r2
 80043d2:	d016      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	4a18      	ldr	r2, [pc, #96]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e4:	430a      	orrs	r2, r1
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d106      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	0249      	lsls	r1, r1, #9
 80043fe:	430a      	orrs	r2, r1
 8004400:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8004402:	2312      	movs	r3, #18
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	781b      	ldrb	r3, [r3, #0]
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	b006      	add	sp, #24
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	40007000 	.word	0x40007000
 8004418:	fffffcff 	.word	0xfffffcff
 800441c:	fffeffff 	.word	0xfffeffff
 8004420:	00001388 	.word	0x00001388
 8004424:	efffffff 	.word	0xefffffff
 8004428:	fffff3ff 	.word	0xfffff3ff
 800442c:	fff3ffff 	.word	0xfff3ffff
 8004430:	ffcfffff 	.word	0xffcfffff
 8004434:	ffffcfff 	.word	0xffffcfff
 8004438:	ffbfffff 	.word	0xffbfffff
 800443c:	ffff3fff 	.word	0xffff3fff

08004440 <__libc_init_array>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	2600      	movs	r6, #0
 8004444:	4d0c      	ldr	r5, [pc, #48]	; (8004478 <__libc_init_array+0x38>)
 8004446:	4c0d      	ldr	r4, [pc, #52]	; (800447c <__libc_init_array+0x3c>)
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	42a6      	cmp	r6, r4
 800444e:	d109      	bne.n	8004464 <__libc_init_array+0x24>
 8004450:	2600      	movs	r6, #0
 8004452:	f000 f821 	bl	8004498 <_init>
 8004456:	4d0a      	ldr	r5, [pc, #40]	; (8004480 <__libc_init_array+0x40>)
 8004458:	4c0a      	ldr	r4, [pc, #40]	; (8004484 <__libc_init_array+0x44>)
 800445a:	1b64      	subs	r4, r4, r5
 800445c:	10a4      	asrs	r4, r4, #2
 800445e:	42a6      	cmp	r6, r4
 8004460:	d105      	bne.n	800446e <__libc_init_array+0x2e>
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	00b3      	lsls	r3, r6, #2
 8004466:	58eb      	ldr	r3, [r5, r3]
 8004468:	4798      	blx	r3
 800446a:	3601      	adds	r6, #1
 800446c:	e7ee      	b.n	800444c <__libc_init_array+0xc>
 800446e:	00b3      	lsls	r3, r6, #2
 8004470:	58eb      	ldr	r3, [r5, r3]
 8004472:	4798      	blx	r3
 8004474:	3601      	adds	r6, #1
 8004476:	e7f2      	b.n	800445e <__libc_init_array+0x1e>
 8004478:	080045b0 	.word	0x080045b0
 800447c:	080045b0 	.word	0x080045b0
 8004480:	080045b0 	.word	0x080045b0
 8004484:	080045b4 	.word	0x080045b4

08004488 <memset>:
 8004488:	0003      	movs	r3, r0
 800448a:	1812      	adds	r2, r2, r0
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	7019      	strb	r1, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <_init>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr

080044a4 <_fini>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr
